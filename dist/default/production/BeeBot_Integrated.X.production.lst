

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Mar 23 19:59:42 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    36   000000                     
    37                           ; Generated 12/10/2023 GMT
    38                           ; 
    39                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F46K22 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71   000000                     _TMR0L	set	4054
    72   000000                     _TMR0H	set	4055
    73   000000                     _TRISCbits	set	3988
    74   000000                     _T0CONbits	set	4053
    75   000000                     _TMR0IF	set	32658
    76   000000                     _TMR0IE	set	32661
    77   000000                     _SSP2STATbits	set	3949
    78   000000                     _SSP2BUF	set	3951
    79   000000                     _ANSELE	set	3900
    80   000000                     _ANSELD	set	3899
    81   000000                     _ANSELC	set	3898
    82   000000                     _ANSELB	set	3897
    83   000000                     _ANSELA	set	3896
    84   000000                     _PORTDbits	set	3971
    85   000000                     _OSCCON	set	4051
    86   000000                     _T0CON	set	4053
    87   000000                     _INTCONbits	set	4082
    88   000000                     _LATCbits	set	3979
    89   000000                     _TRISBbits	set	3987
    90   000000                     _TRISDbits	set	3989
    91   000000                     _PIE1bits	set	3997
    92   000000                     _PIR1bits	set	3998
    93   000000                     _PIE3bits	set	4003
    94   000000                     _RCONbits	set	4048
    95   000000                     _TXREG1	set	4013
    96   000000                     _RCREG1	set	4014
    97   000000                     _INTCON3bits	set	4080
    98   000000                     _RCSTA2bits	set	3953
    99   000000                     _TXSTA2bits	set	3954
   100   000000                     _PORTBbits	set	3969
   101   000000                     _SPBRG2	set	3957
   102                           
   103                           	psect	smallconst
   104   001000                     __psmallconst:
   105                           	callstack 0
   106   001000  00                 	db	0
   107   001001                     STR_19:
   108   001001  52                 	db	82	;'R'
   109   001002  45                 	db	69	;'E'
   110   001003  43                 	db	67	;'C'
   111   001004  00                 	db	0
   112   001005                     STR_15:
   113   001005  53                 	db	83	;'S'
   114   001006  54                 	db	84	;'T'
   115   001007  50                 	db	80	;'P'
   116   001008  00                 	db	0
   117   001009                     STR_17:
   118   001009  52                 	db	82	;'R'
   119   00100A  45                 	db	69	;'E'
   120   00100B  53                 	db	83	;'S'
   121   00100C  00                 	db	0
   122   00100D                     STR_1:
   123   00100D  4E                 	db	78	;'N'
   124   00100E  41                 	db	65	;'A'
   125   00100F  56                 	db	86	;'V'
   126   001010  00                 	db	0
   127   001011                     STR_11:
   128   001011  52                 	db	82	;'R'
   129   001012  41                 	db	65	;'A'
   130   001013  00                 	db	0
   131   001014                     STR_13:
   132   001014  48                 	db	72	;'H'
   133   001015  00                 	db	0
   134   001016                     STR_9:
   135   001016  52                 	db	82	;'R'
   136   001017  00                 	db	0
   137   001018                     STR_3:
   138   001018  4D                 	db	77	;'M'
   139   001019  00                 	db	0
   140   00101A  00                 	db	0	; dummy byte at the end
   141   000000                     
   142                           ; #config settings
   143                           
   144                           	psect	cinit
   145   001A72                     __pcinit:
   146                           	callstack 0
   147   001A72                     start_initialization:
   148                           	callstack 0
   149   001A72                     __initialization:
   150                           	callstack 0
   151                           
   152                           ; Clear objects allocated to BIGRAM (960 bytes)
   153   001A72  EE01  F050         	lfsr	0,__pbssBIGRAM
   154   001A76  EE13 F0C0          	lfsr	1,960
   155   001A7A                     clear_0:
   156   001A7A  6AEE               	clrf	postinc0,c
   157   001A7C  50E5               	movf	postdec1,w,c
   158   001A7E  50E1               	movf	fsr1l,w,c
   159   001A80  E1FC               	bnz	clear_0
   160   001A82  50E2               	movf	fsr1h,w,c
   161   001A84  E1FA               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to BANK1 (80 bytes)
   164   001A86  EE01  F000         	lfsr	0,__pbssBANK1
   165   001A8A  0E50               	movlw	80
   166   001A8C                     clear_1:
   167   001A8C  6AEE               	clrf	postinc0,c
   168   001A8E  06E8               	decf	wreg,f,c
   169   001A90  E1FD               	bnz	clear_1
   170                           
   171                           ; Clear objects allocated to BANK0 (122 bytes)
   172   001A92  EE00  F060         	lfsr	0,__pbssBANK0
   173   001A96  0E7A               	movlw	122
   174   001A98                     clear_2:
   175   001A98  6AEE               	clrf	postinc0,c
   176   001A9A  06E8               	decf	wreg,f,c
   177   001A9C  E1FD               	bnz	clear_2
   178                           
   179                           ; Clear objects allocated to COMRAM (5 bytes)
   180   001A9E  6A4A               	clrf	(__pbssCOMRAM+4)& (0+255),c
   181   001AA0  6A49               	clrf	(__pbssCOMRAM+3)& (0+255),c
   182   001AA2  6A48               	clrf	(__pbssCOMRAM+2)& (0+255),c
   183   001AA4  6A47               	clrf	(__pbssCOMRAM+1)& (0+255),c
   184   001AA6  6A46               	clrf	__pbssCOMRAM& (0+255),c
   185   001AA8                     end_of_initialization:
   186                           	callstack 0
   187   001AA8                     __end_of__initialization:
   188                           	callstack 0
   189   001AA8  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   190   001AAA  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   191   001AAC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   192   001AAE  6EF8               	movwf	tblptru,c
   193   001AB0  0100               	movlb	0
   194   001AB2  EF4F  F00B         	goto	_main	;jump to C main() function
   195                           
   196                           	psect	bssCOMRAM
   197   000046                     __pbssCOMRAM:
   198                           	callstack 0
   199   000046                     _timer_tick:
   200                           	callstack 0
   201   000046                     	ds	2
   202   000048                     _usb_received:
   203                           	callstack 0
   204   000048                     	ds	1
   205   000049                     _usb_message_received:
   206                           	callstack 0
   207   000049                     	ds	1
   208   00004A                     _MRF_transmitting:
   209                           	callstack 0
   210   00004A                     	ds	1
   211                           
   212                           	psect	bssBANK0
   213   000060                     __pbssBANK0:
   214                           	callstack 0
   215   000060                     _state:
   216                           	callstack 0
   217   000060                     	ds	1
   218   000061                     _MRF_message_received:
   219                           	callstack 0
   220   000061                     	ds	1
   221   000062                     _usb_message:
   222                           	callstack 0
   223   000062                     	ds	40
   224   00008A                     _MRF_message:
   225                           	callstack 0
   226   00008A                     	ds	40
   227   0000B2                     _USB_param2:
   228                           	callstack 0
   229   0000B2                     	ds	10
   230   0000BC                     _USB_param1:
   231                           	callstack 0
   232   0000BC                     	ds	10
   233   0000C6                     _MRF_param2:
   234                           	callstack 0
   235   0000C6                     	ds	10
   236   0000D0                     _MRF_param1:
   237                           	callstack 0
   238   0000D0                     	ds	10
   239                           
   240                           	psect	bssBANK1
   241   000100                     __pbssBANK1:
   242                           	callstack 0
   243   000100                     ISR@F6726:
   244                           	callstack 0
   245   000100                     	ds	40
   246   000128                     _current_report:
   247                           	callstack 0
   248   000128                     	ds	40
   249                           
   250                           	psect	bssBIGRAM
   251   000150                     __pbssBIGRAM:
   252                           	callstack 0
   253   000150                     _all_reports:
   254                           	callstack 0
   255   000150                     	ds	960
   256                           
   257                           	psect	cstackBANK0
   258   0000DA                     __pcstackBANK0:
   259                           	callstack 0
   260   0000DA                     ?_strcmp:
   261                           	callstack 0
   262   0000DA                     ?_strlen:
   263                           	callstack 0
   264   0000DA                     ?_isdigit:
   265                           	callstack 0
   266   0000DA                     isdigit@c:
   267                           	callstack 0
   268   0000DA                     strcmp@l:
   269                           	callstack 0
   270   0000DA                     strcpy@dest:
   271                           	callstack 0
   272   0000DA                     strlen@s:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x0
   276   0000DA                     	ds	2
   277   0000DC                     ??_isdigit:
   278   0000DC                     strcmp@r:
   279                           	callstack 0
   280   0000DC                     strcpy@src:
   281                           	callstack 0
   282   0000DC                     strlen@a:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x2
   286   0000DC                     	ds	2
   287   0000DE                     ??_strcmp:
   288   0000DE                     ??_strcpy:
   289                           
   290                           ; 1 bytes @ 0x4
   291   0000DE                     	ds	2
   292   0000E0                     strcpy@s:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0x6
   296   0000E0                     	ds	2
   297   0000E2                     strcpy@d:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x8
   301   0000E2                     	ds	2
   302   0000E4                     append_string@str:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0xA
   306   0000E4                     	ds	2
   307   0000E6                     append_string@ch:
   308                           	callstack 0
   309                           
   310                           ; 1 bytes @ 0xC
   311   0000E6                     	ds	1
   312   0000E7                     ??_append_string:
   313                           
   314                           ; 1 bytes @ 0xD
   315   0000E7                     	ds	2
   316   0000E9                     append_string@length:
   317                           	callstack 0
   318                           
   319                           ; 2 bytes @ 0xF
   320   0000E9                     	ds	2
   321   0000EB                     MRF_parse_message@message:
   322                           	callstack 0
   323   0000EB                     parse_usb_message@message:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0x11
   327   0000EB                     	ds	2
   328   0000ED                     ??_parse_usb_message:
   329   0000ED                     MRF_parse_message@code:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x13
   333   0000ED                     	ds	2
   334   0000EF                     ??_MRF_parse_message:
   335                           
   336                           ; 1 bytes @ 0x15
   337   0000EF                     	ds	3
   338   0000F2                     parse_usb_message@length:
   339                           	callstack 0
   340                           
   341                           ; 1 bytes @ 0x18
   342   0000F2                     	ds	1
   343   0000F3                     parse_usb_message@param1_full:
   344                           	callstack 0
   345                           
   346                           ; 1 bytes @ 0x19
   347   0000F3                     	ds	1
   348   0000F4                     MRF_parse_message@length:
   349                           	callstack 0
   350   0000F4                     parse_usb_message@counter:
   351                           	callstack 0
   352                           
   353                           ; 1 bytes @ 0x1A
   354   0000F4                     	ds	1
   355   0000F5                     MRF_parse_message@param1_full:
   356                           	callstack 0
   357                           
   358                           ; 1 bytes @ 0x1B
   359   0000F5                     	ds	1
   360   0000F6                     MRF_parse_message@counter:
   361                           	callstack 0
   362                           
   363                           ; 1 bytes @ 0x1C
   364   0000F6                     	ds	1
   365   0000F7                     ??_main:
   366                           
   367                           ; 1 bytes @ 0x1D
   368   0000F7                     	ds	2
   369   0000F9                     main@MRF_msg_code:
   370                           	callstack 0
   371                           
   372                           ; 4 bytes @ 0x1F
   373   0000F9                     	ds	4
   374   0000FD                     main@previous_state:
   375                           	callstack 0
   376                           
   377                           ; 1 bytes @ 0x23
   378   0000FD                     	ds	1
   379                           
   380                           	psect	cstackCOMRAM
   381   000001                     __pcstackCOMRAM:
   382                           	callstack 0
   383   000001                     ?i2_strlen:
   384                           	callstack 0
   385   000001                     read_spi_data@data:
   386                           	callstack 0
   387   000001                     read_byte_usb@content:
   388                           	callstack 0
   389   000001                     i2strcpy@dest:
   390                           	callstack 0
   391   000001                     i2strlen@s:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x0
   395   000001                     	ds	1
   396   000002                     
   397                           ; 1 bytes @ 0x1
   398   000002                     	ds	1
   399   000003                     i2strcpy@src:
   400                           	callstack 0
   401   000003                     i2strlen@a:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x2
   405   000003                     	ds	2
   406   000005                     ??i2_strcpy:
   407                           
   408                           ; 1 bytes @ 0x4
   409   000005                     	ds	2
   410   000007                     i2strcpy@s:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x6
   414   000007                     	ds	2
   415   000009                     i2strcpy@d:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x8
   419   000009                     	ds	2
   420   00000B                     i2append_string@str:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0xA
   424   00000B                     	ds	2
   425   00000D                     i2append_string@ch:
   426                           	callstack 0
   427                           
   428                           ; 1 bytes @ 0xC
   429   00000D                     	ds	1
   430   00000E                     ??i2_append_string:
   431                           
   432                           ; 1 bytes @ 0xD
   433   00000E                     	ds	2
   434   000010                     i2append_string@length:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0xF
   438   000010                     	ds	2
   439   000012                     ??_ISR:
   440                           
   441                           ; 1 bytes @ 0x11
   442   000012                     	ds	10
   443   00001C                     ISR@temp_receive_string:
   444                           	callstack 0
   445                           
   446                           ; 40 bytes @ 0x1B
   447   00001C                     	ds	40
   448   000044                     ISR@usb_input:
   449                           	callstack 0
   450                           
   451                           ; 1 bytes @ 0x43
   452   000044                     	ds	1
   453   000045                     ISR@MRF_input:
   454                           	callstack 0
   455                           
   456                           ; 1 bytes @ 0x44
   457   000045                     	ds	1
   458                           
   459 ;;
   460 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   461 ;;
   462 ;; *************** function _main *****************
   463 ;; Defined at:
   464 ;;		line 115 in file "BeeBot_Main.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;  MRF_msg_code    4   31[BANK0 ] unsigned char [4]
   469 ;;  previous_sta    1   35[BANK0 ] unsigned char 
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   474 ;; Tracked objects:
   475 ;;		On entry : 0/0
   476 ;;		On exit  : 0/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   480 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   481 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   482 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   483 ;;Total ram usage:        7 bytes
   484 ;; Hardware stack levels required when called: 6
   485 ;; This function calls:
   486 ;;		_MRF_parse_message
   487 ;;		_init_interrupts
   488 ;;		_init_pins
   489 ;;		_init_uart2
   490 ;;		_parse_usb_message
   491 ;;		_strcmp
   492 ;;		_strcpy
   493 ;; This function is called by:
   494 ;;		Startup code after reset
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text0
   499   00169E                     __ptext0:
   500                           	callstack 0
   501   00169E                     _main:
   502                           	callstack 25
   503   00169E                     
   504                           ;BeeBot_Main.c: 117:     BYTE previous_state;;BeeBot_Main.c: 118:     char MRF_msg_code[
      +                          4];;BeeBot_Main.c: 120:     OSCCON = 0b01100111;
   505   00169E  0E67               	movlw	103
   506   0016A0  6ED3               	movwf	211,c	;volatile
   507   0016A2                     
   508                           ;BeeBot_Main.c: 121:     _delay((unsigned long)((200)*(8000000/4000.0)));
   509   0016A2  0E03               	movlw	3
   510   0016A4  0100               	movlb	0	; () banked
   511   0016A6  6FF8               	movwf	(??_main+1)& (0+255),b
   512   0016A8  0E08               	movlw	8
   513   0016AA  6FF7               	movwf	??_main& (0+255),b
   514   0016AC  0E77               	movlw	119
   515   0016AE                     u1357:
   516   0016AE  2EE8               	decfsz	wreg,f,c
   517   0016B0  D7FE               	bra	u1357
   518   0016B2  2FF7               	decfsz	??_main& (0+255),f,b
   519   0016B4  D7FC               	bra	u1357
   520   0016B6  2FF8               	decfsz	(??_main+1)& (0+255),f,b
   521   0016B8  D7FA               	bra	u1357
   522   0016BA  EFE7  F00B         	goto	l1824
   523   0016BE                     l1794:
   524                           
   525                           ; BSR set to: 0
   526                           ;BeeBot_Main.c: 132:                 init_pins ();
   527   0016BE  EC93  F00D         	call	_init_pins	;wreg free
   528                           
   529                           ;BeeBot_Main.c: 133:                 init_interrupts();
   530   0016C2  ECD3  F00D         	call	_init_interrupts	;wreg free
   531                           
   532                           ;BeeBot_Main.c: 134:                 init_uart2 ();
   533   0016C6  ECEE  F00D         	call	_init_uart2	;wreg free
   534   0016CA                     
   535                           ;BeeBot_Main.c: 135:                 previous_state = INIT;
   536   0016CA  0E00               	movlw	0
   537   0016CC  0100               	movlb	0	; () banked
   538   0016CE  6FFD               	movwf	main@previous_state& (0+255),b
   539   0016D0                     
   540                           ; BSR set to: 0
   541                           ;BeeBot_Main.c: 136:                 state = WAITING;
   542   0016D0  0E01               	movlw	1
   543   0016D2  6F60               	movwf	_state& (0+255),b
   544                           
   545                           ;BeeBot_Main.c: 137:                 break;
   546   0016D4  EF0D  F00C         	goto	l104
   547   0016D8                     l1800:
   548                           
   549                           ; BSR set to: 0
   550                           ;BeeBot_Main.c: 140:                 if(MRF_message_received)
   551   0016D8  5161               	movf	_MRF_message_received& (0+255),w,b
   552   0016DA  B4D8               	btfsc	status,2,c
   553   0016DC  EF72  F00B         	goto	u1171
   554   0016E0  EF74  F00B         	goto	u1170
   555   0016E4                     u1171:
   556   0016E4  EF0D  F00C         	goto	l104
   557   0016E8                     u1170:
   558   0016E8                     
   559                           ; BSR set to: 0
   560                           ;BeeBot_Main.c: 141:                 {;BeeBot_Main.c: 142:                     MRF_messa
      +                          ge_received = 0;
   561   0016E8  0E00               	movlw	0
   562   0016EA  6F61               	movwf	_MRF_message_received& (0+255),b
   563   0016EC                     
   564                           ; BSR set to: 0
   565                           ;BeeBot_Main.c: 143:                     MRF_parse_message(MRF_message, MRF_msg_code);
   566   0016EC  0E8A               	movlw	low _MRF_message
   567   0016EE  6FEB               	movwf	MRF_parse_message@message& (0+255),b
   568   0016F0  0E00               	movlw	high _MRF_message
   569   0016F2  6FEC               	movwf	(MRF_parse_message@message+1)& (0+255),b
   570   0016F4  0EF9               	movlw	low main@MRF_msg_code
   571   0016F6  6FED               	movwf	MRF_parse_message@code& (0+255),b
   572   0016F8  0E00               	movlw	high main@MRF_msg_code
   573   0016FA  6FEE               	movwf	(MRF_parse_message@code+1)& (0+255),b
   574   0016FC  EC0E  F008         	call	_MRF_parse_message	;wreg free
   575   001700                     
   576                           ;BeeBot_Main.c: 145:                     if(!strcmp(MRF_msg_code, "NAV"))
   577   001700  0EF9               	movlw	low main@MRF_msg_code
   578   001702  0100               	movlb	0	; () banked
   579   001704  6FDA               	movwf	strcmp@l& (0+255),b
   580   001706  0E00               	movlw	high main@MRF_msg_code
   581   001708  6FDB               	movwf	(strcmp@l+1)& (0+255),b
   582   00170A  0E0D               	movlw	low STR_1
   583   00170C  6FDC               	movwf	strcmp@r& (0+255),b
   584   00170E  0E10               	movlw	high STR_1
   585   001710  6FDD               	movwf	(strcmp@r+1)& (0+255),b
   586   001712  EC30  F00C         	call	_strcmp	;wreg free
   587   001716  0100               	movlb	0	; () banked
   588   001718  51DA               	movf	?_strcmp& (0+255),w,b
   589   00171A  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   590   00171C  A4D8               	btfss	status,2,c
   591   00171E  EF93  F00B         	goto	u1181
   592   001722  EF95  F00B         	goto	u1180
   593   001726                     u1181:
   594   001726  EF9B  F00B         	goto	l1810
   595   00172A                     u1180:
   596   00172A                     
   597                           ; BSR set to: 0
   598                           ;BeeBot_Main.c: 146:                     {;BeeBot_Main.c: 147:                         s
      +                          tate = AUTO;
   599   00172A  0E02               	movlw	2
   600   00172C  6F60               	movwf	_state& (0+255),b
   601                           
   602                           ;BeeBot_Main.c: 148:                         previous_state = WAITING;
   603   00172E  0E01               	movlw	1
   604   001730  6FFD               	movwf	main@previous_state& (0+255),b
   605                           
   606                           ;BeeBot_Main.c: 149:                     }
   607   001732  EF0D  F00C         	goto	l104
   608   001736                     l1810:
   609                           
   610                           ; BSR set to: 0
   611   001736  0EF9               	movlw	low main@MRF_msg_code
   612   001738  6FDA               	movwf	strcmp@l& (0+255),b
   613   00173A  0E00               	movlw	high main@MRF_msg_code
   614   00173C  6FDB               	movwf	(strcmp@l+1)& (0+255),b
   615   00173E  0E18               	movlw	low STR_3
   616   001740  6FDC               	movwf	strcmp@r& (0+255),b
   617   001742  0E10               	movlw	high STR_3
   618   001744  6FDD               	movwf	(strcmp@r+1)& (0+255),b
   619   001746  EC30  F00C         	call	_strcmp	;wreg free
   620   00174A  0100               	movlb	0	; () banked
   621   00174C  51DA               	movf	?_strcmp& (0+255),w,b
   622   00174E  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   623   001750  A4D8               	btfss	status,2,c
   624   001752  EFAD  F00B         	goto	u1191
   625   001756  EFAF  F00B         	goto	u1190
   626   00175A                     u1191:
   627   00175A  EF0D  F00C         	goto	l104
   628   00175E                     u1190:
   629   00175E                     
   630                           ; BSR set to: 0
   631                           ;BeeBot_Main.c: 151:                     {;BeeBot_Main.c: 152:                         s
      +                          tate = MANUAL;
   632   00175E  0E03               	movlw	3
   633   001760  6F60               	movwf	_state& (0+255),b
   634                           
   635                           ;BeeBot_Main.c: 153:                         previous_state = WAITING;
   636   001762  0E01               	movlw	1
   637   001764  6FFD               	movwf	main@previous_state& (0+255),b
   638   001766  EF0D  F00C         	goto	l104
   639   00176A                     l112:
   640                           
   641                           ; BSR set to: 0
   642                           ;BeeBot_Main.c: 166:                 if((!PORTDbits.RD5))
   643   00176A  BA83               	btfsc	131,5,c	;volatile
   644   00176C  EFBA  F00B         	goto	u1201
   645   001770  EFBC  F00B         	goto	u1200
   646   001774                     u1201:
   647   001774  EFC0  F00B         	goto	l1818
   648   001778                     u1200:
   649   001778                     
   650                           ; BSR set to: 0
   651                           ;BeeBot_Main.c: 167:                 {;BeeBot_Main.c: 168:                     state = p
      +                          revious_state;
   652   001778  C0FD  F060         	movff	main@previous_state,_state
   653   00177C                     
   654                           ; BSR set to: 0
   655                           ;BeeBot_Main.c: 169:                     previous_state = DEBUG;
   656   00177C  0E04               	movlw	4
   657   00177E  6FFD               	movwf	main@previous_state& (0+255),b
   658   001780                     l1818:
   659                           
   660                           ; BSR set to: 0
   661                           ;BeeBot_Main.c: 172:                 if(strcmp(usb_message, ""))
   662   001780  0E62               	movlw	low _usb_message
   663   001782  6FDA               	movwf	strcmp@l& (0+255),b
   664   001784  0E00               	movlw	high _usb_message
   665   001786  6FDB               	movwf	(strcmp@l+1)& (0+255),b
   666   001788  0E13               	movlw	low (STR_11+2)
   667   00178A  6FDC               	movwf	strcmp@r& (0+255),b
   668   00178C  0E10               	movlw	high (STR_11+2)
   669   00178E  6FDD               	movwf	(strcmp@r+1)& (0+255),b
   670   001790  EC30  F00C         	call	_strcmp	;wreg free
   671   001794  0100               	movlb	0	; () banked
   672   001796  51DA               	movf	?_strcmp& (0+255),w,b
   673   001798  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   674   00179A  B4D8               	btfsc	status,2,c
   675   00179C  EFD2  F00B         	goto	u1211
   676   0017A0  EFD4  F00B         	goto	u1210
   677   0017A4                     u1211:
   678   0017A4  EF0D  F00C         	goto	l104
   679   0017A8                     u1210:
   680   0017A8                     
   681                           ; BSR set to: 0
   682                           ;BeeBot_Main.c: 173:                 {;BeeBot_Main.c: 174:                     parse_usb
      +                          _message(usb_message);
   683   0017A8  0E62               	movlw	low _usb_message
   684   0017AA  6FEB               	movwf	parse_usb_message@message& (0+255),b
   685   0017AC  0E00               	movlw	high _usb_message
   686   0017AE  6FEC               	movwf	(parse_usb_message@message+1)& (0+255),b
   687   0017B0  EC50  F00A         	call	_parse_usb_message	;wreg free
   688                           
   689                           ;BeeBot_Main.c: 175:                     strcpy(usb_message, "");
   690   0017B4  0E62               	movlw	low _usb_message
   691   0017B6  0100               	movlb	0	; () banked
   692   0017B8  6FDA               	movwf	strcpy@dest& (0+255),b
   693   0017BA  0E00               	movlw	high _usb_message
   694   0017BC  6FDB               	movwf	(strcpy@dest+1)& (0+255),b
   695   0017BE  0E13               	movlw	low (STR_11+2)
   696   0017C0  6FDC               	movwf	strcpy@src& (0+255),b
   697   0017C2  0E10               	movlw	high (STR_11+2)
   698   0017C4  6FDD               	movwf	(strcpy@src+1)& (0+255),b
   699   0017C6  ECDA  F00C         	call	_strcpy	;wreg free
   700   0017CA  EF0D  F00C         	goto	l104
   701   0017CE                     l1824:
   702   0017CE  0100               	movlb	0	; () banked
   703   0017D0  5160               	movf	_state& (0+255),w,b
   704   0017D2  6FF7               	movwf	??_main& (0+255),b
   705   0017D4  6BF8               	clrf	(??_main+1)& (0+255),b
   706                           
   707                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   708                           ; Switch size 1, requested type "simple"
   709                           ; Number of cases is 1, Range of values is 0 to 0
   710                           ; switch strategies available:
   711                           ; Name         Instructions Cycles
   712                           ; simple_byte            4     3 (average)
   713                           ;	Chosen strategy is simple_byte
   714   0017D6  51F8               	movf	(??_main+1)& (0+255),w,b
   715   0017D8  0A00               	xorlw	0	; case 0
   716   0017DA  B4D8               	btfsc	status,2,c
   717   0017DC  EFF2  F00B         	goto	l1938
   718   0017E0  EF0D  F00C         	goto	l104
   719   0017E4                     l1938:
   720                           
   721                           ; BSR set to: 0
   722                           ; Switch size 1, requested type "simple"
   723                           ; Number of cases is 6, Range of values is 0 to 5
   724                           ; switch strategies available:
   725                           ; Name         Instructions Cycles
   726                           ; simple_byte           19    10 (average)
   727                           ;	Chosen strategy is simple_byte
   728   0017E4  51F7               	movf	??_main& (0+255),w,b
   729   0017E6  0A00               	xorlw	0	; case 0
   730   0017E8  B4D8               	btfsc	status,2,c
   731   0017EA  EF5F  F00B         	goto	l1794
   732   0017EE  0A01               	xorlw	1	; case 1
   733   0017F0  B4D8               	btfsc	status,2,c
   734   0017F2  EF6C  F00B         	goto	l1800
   735   0017F6  0A03               	xorlw	3	; case 2
   736   0017F8  B4D8               	btfsc	status,2,c
   737   0017FA  EF0D  F00C         	goto	l104
   738   0017FE  0A01               	xorlw	1	; case 3
   739   001800  B4D8               	btfsc	status,2,c
   740   001802  EF0D  F00C         	goto	l104
   741   001806  0A07               	xorlw	7	; case 4
   742   001808  B4D8               	btfsc	status,2,c
   743   00180A  EFB5  F00B         	goto	l112
   744   00180E  0A01               	xorlw	1	; case 5
   745   001810  B4D8               	btfsc	status,2,c
   746   001812  EF0D  F00C         	goto	l104
   747   001816  EF0D  F00C         	goto	l104
   748   00181A                     l104:
   749                           
   750                           ;BeeBot_Main.c: 185:         if(PORTDbits.RD5 && state != DEBUG)
   751   00181A  AA83               	btfss	131,5,c	;volatile
   752   00181C  EF12  F00C         	goto	u1221
   753   001820  EF14  F00C         	goto	u1220
   754   001824                     u1221:
   755   001824  EFE7  F00B         	goto	l1824
   756   001828                     u1220:
   757   001828  0E04               	movlw	4
   758   00182A  0100               	movlb	0	; () banked
   759   00182C  1960               	xorwf	_state& (0+255),w,b
   760   00182E  B4D8               	btfsc	status,2,c
   761   001830  EF1C  F00C         	goto	u1231
   762   001834  EF1E  F00C         	goto	u1230
   763   001838                     u1231:
   764   001838  EFE7  F00B         	goto	l1824
   765   00183C                     u1230:
   766   00183C                     
   767                           ; BSR set to: 0
   768                           ;BeeBot_Main.c: 186:         {;BeeBot_Main.c: 187:             previous_state = WAITING;
   769   00183C  0E01               	movlw	1
   770   00183E  6FFD               	movwf	main@previous_state& (0+255),b
   771                           
   772                           ;BeeBot_Main.c: 188:             state = DEBUG;
   773   001840  0E04               	movlw	4
   774   001842  6F60               	movwf	_state& (0+255),b
   775   001844                     
   776                           ; BSR set to: 0
   777                           ;BeeBot_Main.c: 189:             strcpy(usb_message, "");
   778   001844  0E62               	movlw	low _usb_message
   779   001846  6FDA               	movwf	strcpy@dest& (0+255),b
   780   001848  0E00               	movlw	high _usb_message
   781   00184A  6FDB               	movwf	(strcpy@dest+1)& (0+255),b
   782   00184C  0E13               	movlw	low (STR_11+2)
   783   00184E  6FDC               	movwf	strcpy@src& (0+255),b
   784   001850  0E10               	movlw	high (STR_11+2)
   785   001852  6FDD               	movwf	(strcpy@src+1)& (0+255),b
   786   001854  ECDA  F00C         	call	_strcpy	;wreg free
   787   001858  EFE7  F00B         	goto	l1824
   788   00185C  EF99  F000         	goto	start
   789   001860                     __end_of_main:
   790                           	callstack 0
   791                           
   792 ;; *************** function _parse_usb_message *****************
   793 ;; Defined at:
   794 ;;		line 72 in file "MCP2221A.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  message         2   17[BANK0 ] PTR unsigned char 
   797 ;;		 -> usb_message(40), 
   798 ;; Auto vars:     Size  Location     Type
   799 ;;  counter         1   26[BANK0 ] unsigned char 
   800 ;;  param1_full     1   25[BANK0 ] unsigned char 
   801 ;;  length          1   24[BANK0 ] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   811 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   812 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   813 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   814 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;Total ram usage:       10 bytes
   816 ;; Hardware stack levels used: 1
   817 ;; Hardware stack levels required when called: 5
   818 ;; This function calls:
   819 ;;		_append_string
   820 ;;		_isdigit
   821 ;;		_strcmp
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text1
   828   0014A0                     __ptext1:
   829                           	callstack 0
   830   0014A0                     _parse_usb_message:
   831                           	callstack 25
   832   0014A0                     
   833                           ;MCP2221A.c: 72: void parse_usb_message(char message[]);MCP2221A.c: 73: {;MCP2221A.c: 74
      +                          :     BYTE counter;;MCP2221A.c: 75:     BYTE param1_full;;MCP2221A.c: 76:     BYTE lengt
      +                          h;;MCP2221A.c: 79:     if(!strcmp(usb_message, "R"))
   834   0014A0  0E62               	movlw	low _usb_message
   835   0014A2  0100               	movlb	0	; () banked
   836   0014A4  6FDA               	movwf	strcmp@l& (0+255),b
   837   0014A6  0E00               	movlw	high _usb_message
   838   0014A8  6FDB               	movwf	(strcmp@l+1)& (0+255),b
   839   0014AA  0E16               	movlw	low STR_9
   840   0014AC  6FDC               	movwf	strcmp@r& (0+255),b
   841   0014AE  0E10               	movlw	high STR_9
   842   0014B0  6FDD               	movwf	(strcmp@r+1)& (0+255),b
   843   0014B2  EC30  F00C         	call	_strcmp	;wreg free
   844   0014B6  0100               	movlb	0	; () banked
   845   0014B8  51DA               	movf	?_strcmp& (0+255),w,b
   846   0014BA  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   847   0014BC  A4D8               	btfss	status,2,c
   848   0014BE  EF63  F00A         	goto	u1021
   849   0014C2  EF65  F00A         	goto	u1020
   850   0014C6                     u1021:
   851   0014C6  EF67  F00A         	goto	l1726
   852   0014CA                     u1020:
   853   0014CA  EF4E  F00B         	goto	l338
   854   0014CE                     l1726:
   855                           
   856                           ; BSR set to: 0
   857   0014CE  0E62               	movlw	low _usb_message
   858   0014D0  6FDA               	movwf	strcmp@l& (0+255),b
   859   0014D2  0E00               	movlw	high _usb_message
   860   0014D4  6FDB               	movwf	(strcmp@l+1)& (0+255),b
   861   0014D6  0E11               	movlw	low STR_11
   862   0014D8  6FDC               	movwf	strcmp@r& (0+255),b
   863   0014DA  0E10               	movlw	high STR_11
   864   0014DC  6FDD               	movwf	(strcmp@r+1)& (0+255),b
   865   0014DE  EC30  F00C         	call	_strcmp	;wreg free
   866   0014E2  0100               	movlb	0	; () banked
   867   0014E4  51DA               	movf	?_strcmp& (0+255),w,b
   868   0014E6  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   869   0014E8  A4D8               	btfss	status,2,c
   870   0014EA  EF79  F00A         	goto	u1031
   871   0014EE  EF7B  F00A         	goto	u1030
   872   0014F2                     u1031:
   873   0014F2  EF7D  F00A         	goto	l1730
   874   0014F6                     u1030:
   875   0014F6  EF4E  F00B         	goto	l338
   876   0014FA                     l1730:
   877                           
   878                           ; BSR set to: 0
   879   0014FA  0E62               	movlw	low _usb_message
   880   0014FC  6FDA               	movwf	strcmp@l& (0+255),b
   881   0014FE  0E00               	movlw	high _usb_message
   882   001500  6FDB               	movwf	(strcmp@l+1)& (0+255),b
   883   001502  0E0D               	movlw	low STR_1
   884   001504  6FDC               	movwf	strcmp@r& (0+255),b
   885   001506  0E10               	movlw	high STR_1
   886   001508  6FDD               	movwf	(strcmp@r+1)& (0+255),b
   887   00150A  EC30  F00C         	call	_strcmp	;wreg free
   888   00150E  0100               	movlb	0	; () banked
   889   001510  51DA               	movf	?_strcmp& (0+255),w,b
   890   001512  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   891   001514  A4D8               	btfss	status,2,c
   892   001516  EF8F  F00A         	goto	u1041
   893   00151A  EF91  F00A         	goto	u1040
   894   00151E                     u1041:
   895   00151E  EF93  F00A         	goto	l1734
   896   001522                     u1040:
   897   001522  EF4E  F00B         	goto	l338
   898   001526                     l1734:
   899                           
   900                           ; BSR set to: 0
   901   001526  0E0D               	movlw	low STR_1
   902   001528  6EF6               	movwf	tblptrl,c
   903   00152A                     	if	1	;There is more than 1 active tblptr byte
   904   00152A  0E10               	movlw	high STR_1
   905   00152C  6EF7               	movwf	tblptrh,c
   906   00152E                     	endif
   907   00152E                     	if	0	;There are less than 3 active tblptr bytes
   908   00152E                     	endif
   909   00152E  0008               	tblrd		*
   910   001530  50F5               	movf	tablat,w,c
   911   001532  6362               	cpfseq	_usb_message& (0+255),b
   912   001534  EF9E  F00A         	goto	u1051
   913   001538  EFA0  F00A         	goto	u1050
   914   00153C                     u1051:
   915   00153C  EF4E  F00B         	goto	l338
   916   001540                     u1050:
   917   001540                     
   918                           ; BSR set to: 0
   919   001540  0E0E               	movlw	low (STR_1+1)
   920   001542  6EF6               	movwf	tblptrl,c
   921   001544  0E10               	movlw	high (STR_1+1)
   922   001546  6EF7               	movwf	tblptrh,c
   923   001548                     	if	0	;tblptru may be non-zero
   924   001548                     	endif
   925   001548                     	if	0	;tblptru may be non-zero
   926   001548                     	endif
   927   001548  0008               	tblrd		*
   928   00154A  50F5               	movf	tablat,w,c
   929   00154C  6363               	cpfseq	(_usb_message+1)& (0+255),b
   930   00154E  EFAB  F00A         	goto	u1061
   931   001552  EFAD  F00A         	goto	u1060
   932   001556                     u1061:
   933   001556  EF4E  F00B         	goto	l338
   934   00155A                     u1060:
   935   00155A                     
   936                           ; BSR set to: 0
   937   00155A  0E0F               	movlw	low (STR_1+2)
   938   00155C  6EF6               	movwf	tblptrl,c
   939   00155E  0E10               	movlw	high (STR_1+2)
   940   001560  6EF7               	movwf	tblptrh,c
   941   001562                     	if	0	;tblptru may be non-zero
   942   001562                     	endif
   943   001562                     	if	0	;tblptru may be non-zero
   944   001562                     	endif
   945   001562  0008               	tblrd		*
   946   001564  50F5               	movf	tablat,w,c
   947   001566  6364               	cpfseq	(_usb_message+2)& (0+255),b
   948   001568  EFB8  F00A         	goto	u1071
   949   00156C  EFBA  F00A         	goto	u1070
   950   001570                     u1071:
   951   001570  EF4E  F00B         	goto	l338
   952   001574                     u1070:
   953   001574                     
   954                           ; BSR set to: 0
   955                           ;MCP2221A.c: 99:     {;MCP2221A.c: 102:         for(counter = 0; counter < length; count
      +                          er++)
   956   001574  0E00               	movlw	0
   957   001576  6FF4               	movwf	parse_usb_message@counter& (0+255),b
   958   001578  EF45  F00B         	goto	l1764
   959   00157C                     l1744:
   960                           
   961                           ; BSR set to: 0
   962   00157C  51F4               	movf	parse_usb_message@counter& (0+255),w,b
   963   00157E  25EB               	addwf	parse_usb_message@message& (0+255),w,b
   964   001580  6ED9               	movwf	fsr2l,c
   965   001582  0E00               	movlw	0
   966   001584  21EC               	addwfc	(parse_usb_message@message+1)& (0+255),w,b
   967   001586  6EDA               	movwf	fsr2h,c
   968   001588  50DF               	movf	indf2,w,c
   969   00158A  6FED               	movwf	??_parse_usb_message& (0+255),b
   970   00158C  0ED0               	movlw	208
   971   00158E  25ED               	addwf	??_parse_usb_message& (0+255),w,b
   972   001590  6FEE               	movwf	(??_parse_usb_message+1)& (0+255),b
   973   001592  6BEF               	clrf	(??_parse_usb_message+2)& (0+255),b
   974   001594  0EFF               	movlw	255
   975   001596  23EF               	addwfc	(??_parse_usb_message+2)& (0+255),f,b
   976   001598  51EF               	movf	(??_parse_usb_message+2)& (0+255),w,b
   977   00159A  E109               	bnz	u1080
   978   00159C  0E0A               	movlw	10
   979   00159E  5DEE               	subwf	(??_parse_usb_message+1)& (0+255),w,b
   980   0015A0  A0D8               	btfss	status,0,c
   981   0015A2  EFD5  F00A         	goto	u1081
   982   0015A6  EFD7  F00A         	goto	u1080
   983   0015AA                     u1081:
   984   0015AA  EFE6  F00A         	goto	l1748
   985   0015AE                     u1080:
   986   0015AE                     
   987                           ; BSR set to: 0
   988   0015AE  51F4               	movf	parse_usb_message@counter& (0+255),w,b
   989   0015B0  25EB               	addwf	parse_usb_message@message& (0+255),w,b
   990   0015B2  6ED9               	movwf	fsr2l,c
   991   0015B4  0E00               	movlw	0
   992   0015B6  21EC               	addwfc	(parse_usb_message@message+1)& (0+255),w,b
   993   0015B8  6EDA               	movwf	fsr2h,c
   994   0015BA  0E2E               	movlw	46
   995   0015BC  18DE               	xorwf	postinc2,w,c
   996   0015BE  A4D8               	btfss	status,2,c
   997   0015C0  EFE4  F00A         	goto	u1091
   998   0015C4  EFE6  F00A         	goto	u1090
   999   0015C8                     u1091:
  1000   0015C8  EF43  F00B         	goto	l1762
  1001   0015CC                     u1090:
  1002   0015CC                     l1748:
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;MCP2221A.c: 105:             {;MCP2221A.c: 106:                 if(!param1_full)
  1006   0015CC  51F3               	movf	parse_usb_message@param1_full& (0+255),w,b
  1007   0015CE  A4D8               	btfss	status,2,c
  1008   0015D0  EFEC  F00A         	goto	u1101
  1009   0015D4  EFEE  F00A         	goto	u1100
  1010   0015D8                     u1101:
  1011   0015D8  EF35  F00B         	goto	l1760
  1012   0015DC                     u1100:
  1013   0015DC                     
  1014                           ; BSR set to: 0
  1015                           ;MCP2221A.c: 107:                 {;MCP2221A.c: 108:                     append_string(U
      +                          SB_param1, message[counter]);
  1016   0015DC  0EBC               	movlw	low _USB_param1
  1017   0015DE  6FE4               	movwf	append_string@str& (0+255),b
  1018   0015E0  0E00               	movlw	high _USB_param1
  1019   0015E2  6FE5               	movwf	(append_string@str+1)& (0+255),b
  1020   0015E4  51F4               	movf	parse_usb_message@counter& (0+255),w,b
  1021   0015E6  25EB               	addwf	parse_usb_message@message& (0+255),w,b
  1022   0015E8  6ED9               	movwf	fsr2l,c
  1023   0015EA  0E00               	movlw	0
  1024   0015EC  21EC               	addwfc	(parse_usb_message@message+1)& (0+255),w,b
  1025   0015EE  6EDA               	movwf	fsr2h,c
  1026   0015F0  50DF               	movf	indf2,w,c
  1027   0015F2  6FE6               	movwf	append_string@ch& (0+255),b
  1028   0015F4  EC69  F00C         	call	_append_string	;wreg free
  1029   0015F8  0100               	movlb	0	; () banked
  1030   0015FA  51F4               	movf	parse_usb_message@counter& (0+255),w,b
  1031   0015FC  25EB               	addwf	parse_usb_message@message& (0+255),w,b
  1032   0015FE  6FED               	movwf	??_parse_usb_message& (0+255),b
  1033   001600  0E00               	movlw	0
  1034   001602  21EC               	addwfc	(parse_usb_message@message+1)& (0+255),w,b
  1035   001604  6FEE               	movwf	(??_parse_usb_message+1)& (0+255),b
  1036   001606  0E01               	movlw	1
  1037   001608  25ED               	addwf	??_parse_usb_message& (0+255),w,b
  1038   00160A  6ED9               	movwf	fsr2l,c
  1039   00160C  0E00               	movlw	0
  1040   00160E  21EE               	addwfc	(??_parse_usb_message+1)& (0+255),w,b
  1041   001610  6EDA               	movwf	fsr2h,c
  1042   001612  50DF               	movf	indf2,w,c
  1043   001614  6FEF               	movwf	(??_parse_usb_message+2)& (0+255),b
  1044   001616  0ED0               	movlw	208
  1045   001618  25EF               	addwf	(??_parse_usb_message+2)& (0+255),w,b
  1046   00161A  6FF0               	movwf	(??_parse_usb_message+3)& (0+255),b
  1047   00161C  6BF1               	clrf	(??_parse_usb_message+4)& (0+255),b
  1048   00161E  0EFF               	movlw	255
  1049   001620  23F1               	addwfc	(??_parse_usb_message+4)& (0+255),f,b
  1050   001622  51F1               	movf	(??_parse_usb_message+4)& (0+255),w,b
  1051   001624  E109               	bnz	u1110
  1052   001626  0E0A               	movlw	10
  1053   001628  5DF0               	subwf	(??_parse_usb_message+3)& (0+255),w,b
  1054   00162A  A0D8               	btfss	status,0,c
  1055   00162C  EF1A  F00B         	goto	u1111
  1056   001630  EF1C  F00B         	goto	u1110
  1057   001634                     u1111:
  1058   001634  EF43  F00B         	goto	l1762
  1059   001638                     u1110:
  1060   001638                     
  1061                           ; BSR set to: 0
  1062   001638  51F4               	movf	parse_usb_message@counter& (0+255),w,b
  1063   00163A  25EB               	addwf	parse_usb_message@message& (0+255),w,b
  1064   00163C  6FED               	movwf	??_parse_usb_message& (0+255),b
  1065   00163E  0E00               	movlw	0
  1066   001640  21EC               	addwfc	(parse_usb_message@message+1)& (0+255),w,b
  1067   001642  6FEE               	movwf	(??_parse_usb_message+1)& (0+255),b
  1068   001644  0E01               	movlw	1
  1069   001646  25ED               	addwf	??_parse_usb_message& (0+255),w,b
  1070   001648  6ED9               	movwf	fsr2l,c
  1071   00164A  0E00               	movlw	0
  1072   00164C  21EE               	addwfc	(??_parse_usb_message+1)& (0+255),w,b
  1073   00164E  6EDA               	movwf	fsr2h,c
  1074   001650  0E2E               	movlw	46
  1075   001652  18DE               	xorwf	postinc2,w,c
  1076   001654  B4D8               	btfsc	status,2,c
  1077   001656  EF2F  F00B         	goto	u1121
  1078   00165A  EF31  F00B         	goto	u1120
  1079   00165E                     u1121:
  1080   00165E  EF43  F00B         	goto	l1762
  1081   001662                     u1120:
  1082   001662                     
  1083                           ; BSR set to: 0
  1084                           ;MCP2221A.c: 110:                         param1_full = 1;
  1085   001662  0E01               	movlw	1
  1086   001664  6FF3               	movwf	parse_usb_message@param1_full& (0+255),b
  1087   001666  EF43  F00B         	goto	l1762
  1088   00166A                     l1760:
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;MCP2221A.c: 113:                     append_string(USB_param2, message[counter]);
  1092   00166A  0EB2               	movlw	low _USB_param2
  1093   00166C  6FE4               	movwf	append_string@str& (0+255),b
  1094   00166E  0E00               	movlw	high _USB_param2
  1095   001670  6FE5               	movwf	(append_string@str+1)& (0+255),b
  1096   001672  51F4               	movf	parse_usb_message@counter& (0+255),w,b
  1097   001674  25EB               	addwf	parse_usb_message@message& (0+255),w,b
  1098   001676  6ED9               	movwf	fsr2l,c
  1099   001678  0E00               	movlw	0
  1100   00167A  21EC               	addwfc	(parse_usb_message@message+1)& (0+255),w,b
  1101   00167C  6EDA               	movwf	fsr2h,c
  1102   00167E  50DF               	movf	indf2,w,c
  1103   001680  6FE6               	movwf	append_string@ch& (0+255),b
  1104   001682  EC69  F00C         	call	_append_string	;wreg free
  1105   001686                     l1762:
  1106                           
  1107                           ;MCP2221A.c: 115:         }
  1108   001686  0100               	movlb	0	; () banked
  1109   001688  2BF4               	incf	parse_usb_message@counter& (0+255),f,b
  1110   00168A                     l1764:
  1111                           
  1112                           ; BSR set to: 0
  1113   00168A  51F2               	movf	parse_usb_message@length& (0+255),w,b
  1114   00168C  5DF4               	subwf	parse_usb_message@counter& (0+255),w,b
  1115   00168E  A0D8               	btfss	status,0,c
  1116   001690  EF4C  F00B         	goto	u1131
  1117   001694  EF4E  F00B         	goto	u1130
  1118   001698                     u1131:
  1119   001698  EFBE  F00A         	goto	l1744
  1120   00169C                     u1130:
  1121   00169C                     l338:
  1122                           
  1123                           ; BSR set to: 0
  1124   00169C  0012               	return		;funcret
  1125   00169E                     __end_of_parse_usb_message:
  1126                           	callstack 0
  1127                           
  1128 ;; *************** function _init_uart2 *****************
  1129 ;; Defined at:
  1130 ;;		line 13 in file "MCP2221A.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;		None
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;		None
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, status,2
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1148 ;;Total ram usage:        0 bytes
  1149 ;; Hardware stack levels used: 1
  1150 ;; Hardware stack levels required when called: 3
  1151 ;; This function calls:
  1152 ;;		Nothing
  1153 ;; This function is called by:
  1154 ;;		_main
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text2
  1159   001BDC                     __ptext2:
  1160                           	callstack 0
  1161   001BDC                     _init_uart2:
  1162                           	callstack 27
  1163   001BDC                     
  1164                           ;MCP2221A.c: 15:     TXSTA2bits.BRGH = 1;
  1165   001BDC  8472               	bsf	114,2,c	;volatile
  1166   001BDE                     
  1167                           ;MCP2221A.c: 16:     SPBRG2 = 51;
  1168   001BDE  0E33               	movlw	51
  1169   001BE0  6E75               	movwf	117,c	;volatile
  1170   001BE2                     
  1171                           ;MCP2221A.c: 17:     TXSTA2bits.SYNC = 0;
  1172   001BE2  9872               	bcf	114,4,c	;volatile
  1173   001BE4                     
  1174                           ;MCP2221A.c: 18:     RCSTA2bits.SPEN = 1;
  1175   001BE4  8E71               	bsf	113,7,c	;volatile
  1176   001BE6                     
  1177                           ;MCP2221A.c: 19:     TRISDbits.TRISD7 = 1;
  1178   001BE6  8E95               	bsf	149,7,c	;volatile
  1179   001BE8                     
  1180                           ;MCP2221A.c: 20:     TXSTA2bits.TX9 = 0;
  1181   001BE8  9C72               	bcf	114,6,c	;volatile
  1182   001BEA                     
  1183                           ;MCP2221A.c: 21:     RCSTA2bits.RX9 = 0;
  1184   001BEA  9C71               	bcf	113,6,c	;volatile
  1185   001BEC                     
  1186                           ;MCP2221A.c: 22:     RCSTA2bits.CREN = 1;
  1187   001BEC  8871               	bsf	113,4,c	;volatile
  1188   001BEE                     
  1189                           ;MCP2221A.c: 23:     TXSTA2bits.TXEN = 1;
  1190   001BEE  8A72               	bsf	114,5,c	;volatile
  1191   001BF0  0012               	return		;funcret
  1192   001BF2                     __end_of_init_uart2:
  1193                           	callstack 0
  1194                           
  1195 ;; *************** function _init_pins *****************
  1196 ;; Defined at:
  1197 ;;		line 200 in file "BeeBot_Main.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;		None
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;		None
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;Total ram usage:        0 bytes
  1216 ;; Hardware stack levels used: 1
  1217 ;; Hardware stack levels required when called: 3
  1218 ;; This function calls:
  1219 ;;		Nothing
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text3
  1226   001B26                     __ptext3:
  1227                           	callstack 0
  1228   001B26                     _init_pins:
  1229                           	callstack 27
  1230   001B26                     
  1231                           ;BeeBot_Main.c: 202:     TRISDbits.RD6 = 1;
  1232   001B26  8C95               	bsf	149,6,c	;volatile
  1233                           
  1234                           ;BeeBot_Main.c: 203:     TRISDbits.RD6 = 1;
  1235   001B28  8C95               	bsf	149,6,c	;volatile
  1236                           
  1237                           ;BeeBot_Main.c: 204:     TRISDbits.RD7 = 1;
  1238   001B2A  8E95               	bsf	149,7,c	;volatile
  1239                           
  1240                           ;BeeBot_Main.c: 207:     TRISBbits.RB1 = 1;
  1241   001B2C  8293               	bsf	147,1,c	;volatile
  1242                           
  1243                           ;BeeBot_Main.c: 208:     TRISBbits.RB2 = 1;
  1244   001B2E  8493               	bsf	147,2,c	;volatile
  1245                           
  1246                           ;BeeBot_Main.c: 209:     TRISCbits.RC0 = 0;
  1247   001B30  9094               	bcf	148,0,c	;volatile
  1248                           
  1249                           ;BeeBot_Main.c: 210:     TRISCbits.RC1 = 0;
  1250   001B32  9294               	bcf	148,1,c	;volatile
  1251                           
  1252                           ;BeeBot_Main.c: 211:     TRISCbits.RC2 = 1;
  1253   001B34  8494               	bsf	148,2,c	;volatile
  1254                           
  1255                           ;BeeBot_Main.c: 212:     TRISCbits.RC3 = 0;
  1256   001B36  9694               	bcf	148,3,c	;volatile
  1257                           
  1258                           ;BeeBot_Main.c: 213:     TRISCbits.RC4 = 1;
  1259   001B38  8894               	bsf	148,4,c	;volatile
  1260                           
  1261                           ;BeeBot_Main.c: 214:     TRISCbits.RC5 = 1;
  1262   001B3A  8A94               	bsf	148,5,c	;volatile
  1263                           
  1264                           ;BeeBot_Main.c: 217:     LATCbits.LC0 = 1;
  1265   001B3C  808B               	bsf	139,0,c	;volatile
  1266                           
  1267                           ;BeeBot_Main.c: 218:     LATCbits.LC1 = 1;
  1268   001B3E  828B               	bsf	139,1,c	;volatile
  1269   001B40                     
  1270                           ;BeeBot_Main.c: 220:     ANSELA = 0;
  1271   001B40  0E00               	movlw	0
  1272   001B42  010F               	movlb	15	; () banked
  1273   001B44  6F38               	movwf	56,b	;volatile
  1274                           
  1275                           ;BeeBot_Main.c: 221:     ANSELB = 0;
  1276   001B46  0E00               	movlw	0
  1277   001B48  6F39               	movwf	57,b	;volatile
  1278                           
  1279                           ;BeeBot_Main.c: 222:     ANSELC = 0;
  1280   001B4A  0E00               	movlw	0
  1281   001B4C  6F3A               	movwf	58,b	;volatile
  1282                           
  1283                           ;BeeBot_Main.c: 223:     ANSELD = 0;
  1284   001B4E  0E00               	movlw	0
  1285   001B50  6F3B               	movwf	59,b	;volatile
  1286                           
  1287                           ;BeeBot_Main.c: 224:     ANSELE = 0;
  1288   001B52  0E00               	movlw	0
  1289   001B54  6F3C               	movwf	60,b	;volatile
  1290   001B56                     
  1291                           ; BSR set to: 15
  1292   001B56  0012               	return		;funcret
  1293   001B58                     __end_of_init_pins:
  1294                           	callstack 0
  1295                           
  1296 ;; *************** function _init_interrupts *****************
  1297 ;; Defined at:
  1298 ;;		line 231 in file "BeeBot_Main.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;Total ram usage:        0 bytes
  1317 ;; Hardware stack levels used: 1
  1318 ;; Hardware stack levels required when called: 3
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_main
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           	psect	text4
  1327   001BA6                     __ptext4:
  1328                           	callstack 0
  1329   001BA6                     _init_interrupts:
  1330                           	callstack 27
  1331   001BA6                     
  1332                           ;BeeBot_Main.c: 233:     RCONbits.IPEN = 0;
  1333   001BA6  9ED0               	bcf	208,7,c	;volatile
  1334                           
  1335                           ;BeeBot_Main.c: 234:     INTCONbits.GIE = 0;
  1336   001BA8  9EF2               	bcf	242,7,c	;volatile
  1337                           
  1338                           ;BeeBot_Main.c: 240:     PIE3bits.RC2IE = 1;
  1339   001BAA  8AA3               	bsf	163,5,c	;volatile
  1340   001BAC                     
  1341                           ;BeeBot_Main.c: 245:     T0CON = 0x08;
  1342   001BAC  0E08               	movlw	8
  1343   001BAE  6ED5               	movwf	213,c	;volatile
  1344                           
  1345                           ;BeeBot_Main.c: 246:     TMR0H = 0xF8;
  1346   001BB0  0EF8               	movlw	248
  1347   001BB2  6ED7               	movwf	215,c	;volatile
  1348                           
  1349                           ;BeeBot_Main.c: 247:     TMR0L = 0x2F;
  1350   001BB4  0E2F               	movlw	47
  1351   001BB6  6ED6               	movwf	214,c	;volatile
  1352   001BB8                     
  1353                           ;BeeBot_Main.c: 248:     INTCONbits.TMR0IE = 1;
  1354   001BB8  8AF2               	bsf	242,5,c	;volatile
  1355   001BBA                     
  1356                           ;BeeBot_Main.c: 251:     INTCONbits.PEIE = 1;
  1357   001BBA  8CF2               	bsf	242,6,c	;volatile
  1358   001BBC                     
  1359                           ;BeeBot_Main.c: 252:     INTCONbits.GIE = 1;
  1360   001BBC  8EF2               	bsf	242,7,c	;volatile
  1361   001BBE                     
  1362                           ;BeeBot_Main.c: 253:     T0CONbits.TMR0ON = 1;
  1363   001BBE  8ED5               	bsf	213,7,c	;volatile
  1364   001BC0  0012               	return		;funcret
  1365   001BC2                     __end_of_init_interrupts:
  1366                           	callstack 0
  1367                           
  1368 ;; *************** function _MRF_parse_message *****************
  1369 ;; Defined at:
  1370 ;;		line 180 in file "MRF89XAM.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  message         2   17[BANK0 ] PTR unsigned char 
  1373 ;;		 -> MRF_message(40), 
  1374 ;;  code            2   19[BANK0 ] PTR unsigned char 
  1375 ;;		 -> main@MRF_msg_code(4), 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  counter         1   28[BANK0 ] unsigned char 
  1378 ;;  valid           1    0        unsigned char 
  1379 ;;  param1_full     1   27[BANK0 ] unsigned char 
  1380 ;;  length          1   26[BANK0 ] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;Total ram usage:       12 bytes
  1395 ;; Hardware stack levels used: 1
  1396 ;; Hardware stack levels required when called: 5
  1397 ;; This function calls:
  1398 ;;		_append_string
  1399 ;;		_isdigit
  1400 ;;		_strcmp
  1401 ;;		_strcpy
  1402 ;;		_strlen
  1403 ;; This function is called by:
  1404 ;;		_main
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text5
  1409   00101C                     __ptext5:
  1410                           	callstack 0
  1411   00101C                     _MRF_parse_message:
  1412                           	callstack 25
  1413   00101C                     
  1414                           ;MRF89XAM.c: 183:     BYTE counter;;MRF89XAM.c: 184:     BYTE length = (BYTE) strlen(mes
      +                          sage);
  1415   00101C  C0EB  F0DA         	movff	MRF_parse_message@message,strlen@s
  1416   001020  C0EC  F0DB         	movff	MRF_parse_message@message+1,strlen@s+1
  1417   001024  EC5B  F00D         	call	_strlen	;wreg free
  1418   001028  0100               	movlb	0	; () banked
  1419   00102A  51DA               	movf	?_strlen& (0+255),w,b
  1420   00102C  6FF4               	movwf	MRF_parse_message@length& (0+255),b
  1421   00102E                     
  1422                           ; BSR set to: 0
  1423                           ;MRF89XAM.c: 185:     BYTE param1_full = 0;
  1424   00102E  0E00               	movlw	0
  1425   001030  6FF5               	movwf	MRF_parse_message@param1_full& (0+255),b
  1426   001032                     
  1427                           ; BSR set to: 0
  1428                           ;MRF89XAM.c: 187:     if(!strcmp(message, "R"))
  1429   001032  C0EB  F0DA         	movff	MRF_parse_message@message,strcmp@l
  1430   001036  C0EC  F0DB         	movff	MRF_parse_message@message+1,strcmp@l+1
  1431   00103A  0E16               	movlw	low STR_9
  1432   00103C  6FDC               	movwf	strcmp@r& (0+255),b
  1433   00103E  0E10               	movlw	high STR_9
  1434   001040  6FDD               	movwf	(strcmp@r+1)& (0+255),b
  1435   001042  EC30  F00C         	call	_strcmp	;wreg free
  1436   001046  0100               	movlb	0	; () banked
  1437   001048  51DA               	movf	?_strcmp& (0+255),w,b
  1438   00104A  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
  1439   00104C  A4D8               	btfss	status,2,c
  1440   00104E  EF2B  F008         	goto	u841
  1441   001052  EF2D  F008         	goto	u840
  1442   001056                     u841:
  1443   001056  EF39  F008         	goto	l1630
  1444   00105A                     u840:
  1445   00105A                     
  1446                           ; BSR set to: 0
  1447                           ;MRF89XAM.c: 190:         strcpy(code, message);
  1448   00105A  C0ED  F0DA         	movff	MRF_parse_message@code,strcpy@dest
  1449   00105E  C0EE  F0DB         	movff	MRF_parse_message@code+1,strcpy@dest+1
  1450   001062  C0EB  F0DC         	movff	MRF_parse_message@message,strcpy@src
  1451   001066  C0EC  F0DD         	movff	MRF_parse_message@message+1,strcpy@src+1
  1452   00106A  ECDA  F00C         	call	_strcpy	;wreg free
  1453                           
  1454                           ;MRF89XAM.c: 193:     }
  1455   00106E  EF4F  F00A         	goto	l254
  1456   001072                     l1630:
  1457                           
  1458                           ; BSR set to: 0
  1459   001072  C0EB  F0DA         	movff	MRF_parse_message@message,strcmp@l
  1460   001076  C0EC  F0DB         	movff	MRF_parse_message@message+1,strcmp@l+1
  1461   00107A  0E11               	movlw	low STR_11
  1462   00107C  6FDC               	movwf	strcmp@r& (0+255),b
  1463   00107E  0E10               	movlw	high STR_11
  1464   001080  6FDD               	movwf	(strcmp@r+1)& (0+255),b
  1465   001082  EC30  F00C         	call	_strcmp	;wreg free
  1466   001086  0100               	movlb	0	; () banked
  1467   001088  51DA               	movf	?_strcmp& (0+255),w,b
  1468   00108A  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
  1469   00108C  A4D8               	btfss	status,2,c
  1470   00108E  EF4B  F008         	goto	u851
  1471   001092  EF4D  F008         	goto	u850
  1472   001096                     u851:
  1473   001096  EF59  F008         	goto	l1636
  1474   00109A                     u850:
  1475   00109A                     
  1476                           ; BSR set to: 0
  1477                           ;MRF89XAM.c: 197:         strcpy(code, message);
  1478   00109A  C0ED  F0DA         	movff	MRF_parse_message@code,strcpy@dest
  1479   00109E  C0EE  F0DB         	movff	MRF_parse_message@code+1,strcpy@dest+1
  1480   0010A2  C0EB  F0DC         	movff	MRF_parse_message@message,strcpy@src
  1481   0010A6  C0EC  F0DD         	movff	MRF_parse_message@message+1,strcpy@src+1
  1482   0010AA  ECDA  F00C         	call	_strcpy	;wreg free
  1483                           
  1484                           ;MRF89XAM.c: 204:     }
  1485   0010AE  EF4F  F00A         	goto	l254
  1486   0010B2                     l1636:
  1487                           
  1488                           ; BSR set to: 0
  1489   0010B2  C0EB  F0DA         	movff	MRF_parse_message@message,strcmp@l
  1490   0010B6  C0EC  F0DB         	movff	MRF_parse_message@message+1,strcmp@l+1
  1491   0010BA  0E14               	movlw	low STR_13
  1492   0010BC  6FDC               	movwf	strcmp@r& (0+255),b
  1493   0010BE  0E10               	movlw	high STR_13
  1494   0010C0  6FDD               	movwf	(strcmp@r+1)& (0+255),b
  1495   0010C2  EC30  F00C         	call	_strcmp	;wreg free
  1496   0010C6  0100               	movlb	0	; () banked
  1497   0010C8  51DA               	movf	?_strcmp& (0+255),w,b
  1498   0010CA  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
  1499   0010CC  A4D8               	btfss	status,2,c
  1500   0010CE  EF6B  F008         	goto	u861
  1501   0010D2  EF6D  F008         	goto	u860
  1502   0010D6                     u861:
  1503   0010D6  EF79  F008         	goto	l1642
  1504   0010DA                     u860:
  1505   0010DA                     
  1506                           ; BSR set to: 0
  1507                           ;MRF89XAM.c: 208:         strcpy(code, message);
  1508   0010DA  C0ED  F0DA         	movff	MRF_parse_message@code,strcpy@dest
  1509   0010DE  C0EE  F0DB         	movff	MRF_parse_message@code+1,strcpy@dest+1
  1510   0010E2  C0EB  F0DC         	movff	MRF_parse_message@message,strcpy@src
  1511   0010E6  C0EC  F0DD         	movff	MRF_parse_message@message+1,strcpy@src+1
  1512   0010EA  ECDA  F00C         	call	_strcpy	;wreg free
  1513                           
  1514                           ;MRF89XAM.c: 212:     }
  1515   0010EE  EF4F  F00A         	goto	l254
  1516   0010F2                     l1642:
  1517                           
  1518                           ; BSR set to: 0
  1519   0010F2  C0EB  F0DA         	movff	MRF_parse_message@message,strcmp@l
  1520   0010F6  C0EC  F0DB         	movff	MRF_parse_message@message+1,strcmp@l+1
  1521   0010FA  0E05               	movlw	low STR_15
  1522   0010FC  6FDC               	movwf	strcmp@r& (0+255),b
  1523   0010FE  0E10               	movlw	high STR_15
  1524   001100  6FDD               	movwf	(strcmp@r+1)& (0+255),b
  1525   001102  EC30  F00C         	call	_strcmp	;wreg free
  1526   001106  0100               	movlb	0	; () banked
  1527   001108  51DA               	movf	?_strcmp& (0+255),w,b
  1528   00110A  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
  1529   00110C  A4D8               	btfss	status,2,c
  1530   00110E  EF8B  F008         	goto	u871
  1531   001112  EF8D  F008         	goto	u870
  1532   001116                     u871:
  1533   001116  EF99  F008         	goto	l1648
  1534   00111A                     u870:
  1535   00111A                     
  1536                           ; BSR set to: 0
  1537                           ;MRF89XAM.c: 216:         strcpy(code, message);
  1538   00111A  C0ED  F0DA         	movff	MRF_parse_message@code,strcpy@dest
  1539   00111E  C0EE  F0DB         	movff	MRF_parse_message@code+1,strcpy@dest+1
  1540   001122  C0EB  F0DC         	movff	MRF_parse_message@message,strcpy@src
  1541   001126  C0EC  F0DD         	movff	MRF_parse_message@message+1,strcpy@src+1
  1542   00112A  ECDA  F00C         	call	_strcpy	;wreg free
  1543                           
  1544                           ;MRF89XAM.c: 220:     }
  1545   00112E  EF4F  F00A         	goto	l254
  1546   001132                     l1648:
  1547                           
  1548                           ; BSR set to: 0
  1549   001132  C0EB  F0DA         	movff	MRF_parse_message@message,strcmp@l
  1550   001136  C0EC  F0DB         	movff	MRF_parse_message@message+1,strcmp@l+1
  1551   00113A  0E09               	movlw	low STR_17
  1552   00113C  6FDC               	movwf	strcmp@r& (0+255),b
  1553   00113E  0E10               	movlw	high STR_17
  1554   001140  6FDD               	movwf	(strcmp@r+1)& (0+255),b
  1555   001142  EC30  F00C         	call	_strcmp	;wreg free
  1556   001146  0100               	movlb	0	; () banked
  1557   001148  51DA               	movf	?_strcmp& (0+255),w,b
  1558   00114A  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
  1559   00114C  A4D8               	btfss	status,2,c
  1560   00114E  EFAB  F008         	goto	u881
  1561   001152  EFAD  F008         	goto	u880
  1562   001156                     u881:
  1563   001156  EFB9  F008         	goto	l1654
  1564   00115A                     u880:
  1565   00115A                     
  1566                           ; BSR set to: 0
  1567                           ;MRF89XAM.c: 224:         strcpy(code, message);
  1568   00115A  C0ED  F0DA         	movff	MRF_parse_message@code,strcpy@dest
  1569   00115E  C0EE  F0DB         	movff	MRF_parse_message@code+1,strcpy@dest+1
  1570   001162  C0EB  F0DC         	movff	MRF_parse_message@message,strcpy@src
  1571   001166  C0EC  F0DD         	movff	MRF_parse_message@message+1,strcpy@src+1
  1572   00116A  ECDA  F00C         	call	_strcpy	;wreg free
  1573                           
  1574                           ;MRF89XAM.c: 231:     }
  1575   00116E  EF4F  F00A         	goto	l254
  1576   001172                     l1654:
  1577                           
  1578                           ; BSR set to: 0
  1579   001172  C0EB  F0DA         	movff	MRF_parse_message@message,strcmp@l
  1580   001176  C0EC  F0DB         	movff	MRF_parse_message@message+1,strcmp@l+1
  1581   00117A  0E01               	movlw	low STR_19
  1582   00117C  6FDC               	movwf	strcmp@r& (0+255),b
  1583   00117E  0E10               	movlw	high STR_19
  1584   001180  6FDD               	movwf	(strcmp@r+1)& (0+255),b
  1585   001182  EC30  F00C         	call	_strcmp	;wreg free
  1586   001186  0100               	movlb	0	; () banked
  1587   001188  51DA               	movf	?_strcmp& (0+255),w,b
  1588   00118A  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
  1589   00118C  A4D8               	btfss	status,2,c
  1590   00118E  EFCB  F008         	goto	u891
  1591   001192  EFCD  F008         	goto	u890
  1592   001196                     u891:
  1593   001196  EFD9  F008         	goto	l1660
  1594   00119A                     u890:
  1595   00119A                     
  1596                           ; BSR set to: 0
  1597                           ;MRF89XAM.c: 235:         strcpy(code, message);
  1598   00119A  C0ED  F0DA         	movff	MRF_parse_message@code,strcpy@dest
  1599   00119E  C0EE  F0DB         	movff	MRF_parse_message@code+1,strcpy@dest+1
  1600   0011A2  C0EB  F0DC         	movff	MRF_parse_message@message,strcpy@src
  1601   0011A6  C0EC  F0DD         	movff	MRF_parse_message@message+1,strcpy@src+1
  1602   0011AA  ECDA  F00C         	call	_strcpy	;wreg free
  1603                           
  1604                           ;MRF89XAM.c: 245:     }
  1605   0011AE  EF4F  F00A         	goto	l254
  1606   0011B2                     l1660:
  1607                           
  1608                           ; BSR set to: 0
  1609   0011B2  C0EB  FFD9         	movff	MRF_parse_message@message,fsr2l
  1610   0011B6  C0EC  FFDA         	movff	MRF_parse_message@message+1,fsr2h
  1611   0011BA  0E41               	movlw	65
  1612   0011BC  18DE               	xorwf	postinc2,w,c
  1613   0011BE  B4D8               	btfsc	status,2,c
  1614   0011C0  EFE4  F008         	goto	u901
  1615   0011C4  EFE6  F008         	goto	u900
  1616   0011C8                     u901:
  1617   0011C8  EFF3  F008         	goto	l1664
  1618   0011CC                     u900:
  1619   0011CC                     
  1620                           ; BSR set to: 0
  1621   0011CC  C0EB  FFD9         	movff	MRF_parse_message@message,fsr2l
  1622   0011D0  C0EC  FFDA         	movff	MRF_parse_message@message+1,fsr2h
  1623   0011D4  0E4D               	movlw	77
  1624   0011D6  18DE               	xorwf	postinc2,w,c
  1625   0011D8  A4D8               	btfss	status,2,c
  1626   0011DA  EFF1  F008         	goto	u911
  1627   0011DE  EFF3  F008         	goto	u910
  1628   0011E2                     u911:
  1629   0011E2  EF08  F009         	goto	l1670
  1630   0011E6                     u910:
  1631   0011E6                     l1664:
  1632   0011E6                     l1666:
  1633                           
  1634                           ;MRF89XAM.c: 249:         code[0] = message[0];
  1635   0011E6  C0EB  FFD9         	movff	MRF_parse_message@message,fsr2l
  1636   0011EA  C0EC  FFDA         	movff	MRF_parse_message@message+1,fsr2h
  1637   0011EE  C0ED  FFE1         	movff	MRF_parse_message@code,fsr1l
  1638   0011F2  C0EE  FFE2         	movff	MRF_parse_message@code+1,fsr1h
  1639   0011F6  CFDF FFE7          	movff	indf2,indf1
  1640   0011FA                     
  1641                           ;MRF89XAM.c: 250:         code[1] = '\0';
  1642   0011FA  0100               	movlb	0	; () banked
  1643   0011FC  EE20 F001          	lfsr	2,1
  1644   001200  51ED               	movf	MRF_parse_message@code& (0+255),w,b
  1645   001202  26D9               	addwf	fsr2l,f,c
  1646   001204  51EE               	movf	(MRF_parse_message@code+1)& (0+255),w,b
  1647   001206  22DA               	addwfc	fsr2h,f,c
  1648   001208  0E00               	movlw	0
  1649   00120A  6EDF               	movwf	indf2,c
  1650                           
  1651                           ;MRF89XAM.c: 251:     }
  1652   00120C  EF4F  F00A         	goto	l254
  1653   001210                     l1670:
  1654                           
  1655                           ; BSR set to: 0
  1656   001210  C0EB  FFD9         	movff	MRF_parse_message@message,fsr2l
  1657   001214  C0EC  FFDA         	movff	MRF_parse_message@message+1,fsr2h
  1658   001218  0E4E               	movlw	78
  1659   00121A  18DE               	xorwf	postinc2,w,c
  1660   00121C  A4D8               	btfss	status,2,c
  1661   00121E  EF13  F009         	goto	u921
  1662   001222  EF15  F009         	goto	u920
  1663   001226                     u921:
  1664   001226  EF0D  F00A         	goto	l1712
  1665   00122A                     u920:
  1666   00122A                     
  1667                           ; BSR set to: 0
  1668   00122A  EE20 F001          	lfsr	2,1
  1669   00122E  51EB               	movf	MRF_parse_message@message& (0+255),w,b
  1670   001230  26D9               	addwf	fsr2l,f,c
  1671   001232  51EC               	movf	(MRF_parse_message@message+1)& (0+255),w,b
  1672   001234  22DA               	addwfc	fsr2h,f,c
  1673   001236  0E41               	movlw	65
  1674   001238  18DE               	xorwf	postinc2,w,c
  1675   00123A  A4D8               	btfss	status,2,c
  1676   00123C  EF22  F009         	goto	u931
  1677   001240  EF24  F009         	goto	u930
  1678   001244                     u931:
  1679   001244  EF0D  F00A         	goto	l1712
  1680   001248                     u930:
  1681   001248                     
  1682                           ; BSR set to: 0
  1683   001248  EE20 F002          	lfsr	2,2
  1684   00124C  51EB               	movf	MRF_parse_message@message& (0+255),w,b
  1685   00124E  26D9               	addwf	fsr2l,f,c
  1686   001250  51EC               	movf	(MRF_parse_message@message+1)& (0+255),w,b
  1687   001252  22DA               	addwfc	fsr2h,f,c
  1688   001254  0E56               	movlw	86
  1689   001256  18DE               	xorwf	postinc2,w,c
  1690   001258  A4D8               	btfss	status,2,c
  1691   00125A  EF31  F009         	goto	u941
  1692   00125E  EF33  F009         	goto	u940
  1693   001262                     u941:
  1694   001262  EF0D  F00A         	goto	l1712
  1695   001266                     u940:
  1696   001266                     
  1697                           ; BSR set to: 0
  1698                           ;MRF89XAM.c: 253:     {;MRF89XAM.c: 254:         strcpy(MRF_param1, "");
  1699   001266  0ED0               	movlw	low _MRF_param1
  1700   001268  6FDA               	movwf	strcpy@dest& (0+255),b
  1701   00126A  0E00               	movlw	high _MRF_param1
  1702   00126C  6FDB               	movwf	(strcpy@dest+1)& (0+255),b
  1703   00126E  0E13               	movlw	low (STR_11+2)
  1704   001270  6FDC               	movwf	strcpy@src& (0+255),b
  1705   001272  0E10               	movlw	high (STR_11+2)
  1706   001274  6FDD               	movwf	(strcpy@src+1)& (0+255),b
  1707   001276  ECDA  F00C         	call	_strcpy	;wreg free
  1708                           
  1709                           ;MRF89XAM.c: 255:         strcpy(MRF_param2, "");
  1710   00127A  0EC6               	movlw	low _MRF_param2
  1711   00127C  0100               	movlb	0	; () banked
  1712   00127E  6FDA               	movwf	strcpy@dest& (0+255),b
  1713   001280  0E00               	movlw	high _MRF_param2
  1714   001282  6FDB               	movwf	(strcpy@dest+1)& (0+255),b
  1715   001284  0E13               	movlw	low (STR_11+2)
  1716   001286  6FDC               	movwf	strcpy@src& (0+255),b
  1717   001288  0E10               	movlw	high (STR_11+2)
  1718   00128A  6FDD               	movwf	(strcpy@src+1)& (0+255),b
  1719   00128C  ECDA  F00C         	call	_strcpy	;wreg free
  1720   001290                     
  1721                           ;MRF89XAM.c: 256:         code[0] = message[0];
  1722   001290  C0EB  FFD9         	movff	MRF_parse_message@message,fsr2l
  1723   001294  C0EC  FFDA         	movff	MRF_parse_message@message+1,fsr2h
  1724   001298  C0ED  FFE1         	movff	MRF_parse_message@code,fsr1l
  1725   00129C  C0EE  FFE2         	movff	MRF_parse_message@code+1,fsr1h
  1726   0012A0  CFDF FFE7          	movff	indf2,indf1
  1727   0012A4                     
  1728                           ;MRF89XAM.c: 257:         code[1] = message[1];
  1729   0012A4  0100               	movlb	0	; () banked
  1730   0012A6  EE20 F001          	lfsr	2,1
  1731   0012AA  51EB               	movf	MRF_parse_message@message& (0+255),w,b
  1732   0012AC  26D9               	addwf	fsr2l,f,c
  1733   0012AE  51EC               	movf	(MRF_parse_message@message+1)& (0+255),w,b
  1734   0012B0  22DA               	addwfc	fsr2h,f,c
  1735   0012B2  EE10 F001          	lfsr	1,1
  1736   0012B6  51ED               	movf	MRF_parse_message@code& (0+255),w,b
  1737   0012B8  26E1               	addwf	fsr1l,f,c
  1738   0012BA  51EE               	movf	(MRF_parse_message@code+1)& (0+255),w,b
  1739   0012BC  22E2               	addwfc	fsr1h,f,c
  1740   0012BE  CFDF FFE7          	movff	indf2,indf1
  1741   0012C2                     
  1742                           ; BSR set to: 0
  1743                           ;MRF89XAM.c: 258:         code[2] = message[2];
  1744   0012C2  EE20 F002          	lfsr	2,2
  1745   0012C6  51EB               	movf	MRF_parse_message@message& (0+255),w,b
  1746   0012C8  26D9               	addwf	fsr2l,f,c
  1747   0012CA  51EC               	movf	(MRF_parse_message@message+1)& (0+255),w,b
  1748   0012CC  22DA               	addwfc	fsr2h,f,c
  1749   0012CE  EE10 F002          	lfsr	1,2
  1750   0012D2  51ED               	movf	MRF_parse_message@code& (0+255),w,b
  1751   0012D4  26E1               	addwf	fsr1l,f,c
  1752   0012D6  51EE               	movf	(MRF_parse_message@code+1)& (0+255),w,b
  1753   0012D8  22E2               	addwfc	fsr1h,f,c
  1754   0012DA  CFDF FFE7          	movff	indf2,indf1
  1755   0012DE                     
  1756                           ; BSR set to: 0
  1757                           ;MRF89XAM.c: 259:         code[3] = '\0';
  1758   0012DE  EE20 F003          	lfsr	2,3
  1759   0012E2  51ED               	movf	MRF_parse_message@code& (0+255),w,b
  1760   0012E4  26D9               	addwf	fsr2l,f,c
  1761   0012E6  51EE               	movf	(MRF_parse_message@code+1)& (0+255),w,b
  1762   0012E8  22DA               	addwfc	fsr2h,f,c
  1763   0012EA  0E00               	movlw	0
  1764   0012EC  6EDF               	movwf	indf2,c
  1765   0012EE                     
  1766                           ; BSR set to: 0
  1767                           ;MRF89XAM.c: 262:         for(counter = 0; counter < length; counter++)
  1768   0012EE  0E00               	movlw	0
  1769   0012F0  6FF6               	movwf	MRF_parse_message@counter& (0+255),b
  1770   0012F2  EF02  F00A         	goto	l1710
  1771   0012F6                     l1690:
  1772                           
  1773                           ; BSR set to: 0
  1774   0012F6  51F6               	movf	MRF_parse_message@counter& (0+255),w,b
  1775   0012F8  25EB               	addwf	MRF_parse_message@message& (0+255),w,b
  1776   0012FA  6ED9               	movwf	fsr2l,c
  1777   0012FC  0E00               	movlw	0
  1778   0012FE  21EC               	addwfc	(MRF_parse_message@message+1)& (0+255),w,b
  1779   001300  6EDA               	movwf	fsr2h,c
  1780   001302  50DF               	movf	indf2,w,c
  1781   001304  6FEF               	movwf	??_MRF_parse_message& (0+255),b
  1782   001306  0ED0               	movlw	208
  1783   001308  25EF               	addwf	??_MRF_parse_message& (0+255),w,b
  1784   00130A  6FF0               	movwf	(??_MRF_parse_message+1)& (0+255),b
  1785   00130C  6BF1               	clrf	(??_MRF_parse_message+2)& (0+255),b
  1786   00130E  0EFF               	movlw	255
  1787   001310  23F1               	addwfc	(??_MRF_parse_message+2)& (0+255),f,b
  1788   001312  51F1               	movf	(??_MRF_parse_message+2)& (0+255),w,b
  1789   001314  E109               	bnz	u950
  1790   001316  0E0A               	movlw	10
  1791   001318  5DF0               	subwf	(??_MRF_parse_message+1)& (0+255),w,b
  1792   00131A  A0D8               	btfss	status,0,c
  1793   00131C  EF92  F009         	goto	u951
  1794   001320  EF94  F009         	goto	u950
  1795   001324                     u951:
  1796   001324  EFA3  F009         	goto	l1694
  1797   001328                     u950:
  1798   001328                     
  1799                           ; BSR set to: 0
  1800   001328  51F6               	movf	MRF_parse_message@counter& (0+255),w,b
  1801   00132A  25EB               	addwf	MRF_parse_message@message& (0+255),w,b
  1802   00132C  6ED9               	movwf	fsr2l,c
  1803   00132E  0E00               	movlw	0
  1804   001330  21EC               	addwfc	(MRF_parse_message@message+1)& (0+255),w,b
  1805   001332  6EDA               	movwf	fsr2h,c
  1806   001334  0E2E               	movlw	46
  1807   001336  18DE               	xorwf	postinc2,w,c
  1808   001338  A4D8               	btfss	status,2,c
  1809   00133A  EFA1  F009         	goto	u961
  1810   00133E  EFA3  F009         	goto	u960
  1811   001342                     u961:
  1812   001342  EF00  F00A         	goto	l1708
  1813   001346                     u960:
  1814   001346                     l1694:
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;MRF89XAM.c: 265:             {;MRF89XAM.c: 266:                 if(!param1_full)
  1818   001346  51F5               	movf	MRF_parse_message@param1_full& (0+255),w,b
  1819   001348  A4D8               	btfss	status,2,c
  1820   00134A  EFA9  F009         	goto	u971
  1821   00134E  EFAB  F009         	goto	u970
  1822   001352                     u971:
  1823   001352  EFF2  F009         	goto	l1706
  1824   001356                     u970:
  1825   001356                     
  1826                           ; BSR set to: 0
  1827                           ;MRF89XAM.c: 267:                 {;MRF89XAM.c: 268:                     append_string(M
      +                          RF_param1, message[counter]);
  1828   001356  0ED0               	movlw	low _MRF_param1
  1829   001358  6FE4               	movwf	append_string@str& (0+255),b
  1830   00135A  0E00               	movlw	high _MRF_param1
  1831   00135C  6FE5               	movwf	(append_string@str+1)& (0+255),b
  1832   00135E  51F6               	movf	MRF_parse_message@counter& (0+255),w,b
  1833   001360  25EB               	addwf	MRF_parse_message@message& (0+255),w,b
  1834   001362  6ED9               	movwf	fsr2l,c
  1835   001364  0E00               	movlw	0
  1836   001366  21EC               	addwfc	(MRF_parse_message@message+1)& (0+255),w,b
  1837   001368  6EDA               	movwf	fsr2h,c
  1838   00136A  50DF               	movf	indf2,w,c
  1839   00136C  6FE6               	movwf	append_string@ch& (0+255),b
  1840   00136E  EC69  F00C         	call	_append_string	;wreg free
  1841   001372  0100               	movlb	0	; () banked
  1842   001374  51F6               	movf	MRF_parse_message@counter& (0+255),w,b
  1843   001376  25EB               	addwf	MRF_parse_message@message& (0+255),w,b
  1844   001378  6FEF               	movwf	??_MRF_parse_message& (0+255),b
  1845   00137A  0E00               	movlw	0
  1846   00137C  21EC               	addwfc	(MRF_parse_message@message+1)& (0+255),w,b
  1847   00137E  6FF0               	movwf	(??_MRF_parse_message+1)& (0+255),b
  1848   001380  0E01               	movlw	1
  1849   001382  25EF               	addwf	??_MRF_parse_message& (0+255),w,b
  1850   001384  6ED9               	movwf	fsr2l,c
  1851   001386  0E00               	movlw	0
  1852   001388  21F0               	addwfc	(??_MRF_parse_message+1)& (0+255),w,b
  1853   00138A  6EDA               	movwf	fsr2h,c
  1854   00138C  50DF               	movf	indf2,w,c
  1855   00138E  6FF1               	movwf	(??_MRF_parse_message+2)& (0+255),b
  1856   001390  0ED0               	movlw	208
  1857   001392  25F1               	addwf	(??_MRF_parse_message+2)& (0+255),w,b
  1858   001394  6FF2               	movwf	(??_MRF_parse_message+3)& (0+255),b
  1859   001396  6BF3               	clrf	(??_MRF_parse_message+4)& (0+255),b
  1860   001398  0EFF               	movlw	255
  1861   00139A  23F3               	addwfc	(??_MRF_parse_message+4)& (0+255),f,b
  1862   00139C  51F3               	movf	(??_MRF_parse_message+4)& (0+255),w,b
  1863   00139E  E109               	bnz	u980
  1864   0013A0  0E0A               	movlw	10
  1865   0013A2  5DF2               	subwf	(??_MRF_parse_message+3)& (0+255),w,b
  1866   0013A4  A0D8               	btfss	status,0,c
  1867   0013A6  EFD7  F009         	goto	u981
  1868   0013AA  EFD9  F009         	goto	u980
  1869   0013AE                     u981:
  1870   0013AE  EF00  F00A         	goto	l1708
  1871   0013B2                     u980:
  1872   0013B2                     
  1873                           ; BSR set to: 0
  1874   0013B2  51F6               	movf	MRF_parse_message@counter& (0+255),w,b
  1875   0013B4  25EB               	addwf	MRF_parse_message@message& (0+255),w,b
  1876   0013B6  6FEF               	movwf	??_MRF_parse_message& (0+255),b
  1877   0013B8  0E00               	movlw	0
  1878   0013BA  21EC               	addwfc	(MRF_parse_message@message+1)& (0+255),w,b
  1879   0013BC  6FF0               	movwf	(??_MRF_parse_message+1)& (0+255),b
  1880   0013BE  0E01               	movlw	1
  1881   0013C0  25EF               	addwf	??_MRF_parse_message& (0+255),w,b
  1882   0013C2  6ED9               	movwf	fsr2l,c
  1883   0013C4  0E00               	movlw	0
  1884   0013C6  21F0               	addwfc	(??_MRF_parse_message+1)& (0+255),w,b
  1885   0013C8  6EDA               	movwf	fsr2h,c
  1886   0013CA  0E2E               	movlw	46
  1887   0013CC  18DE               	xorwf	postinc2,w,c
  1888   0013CE  B4D8               	btfsc	status,2,c
  1889   0013D0  EFEC  F009         	goto	u991
  1890   0013D4  EFEE  F009         	goto	u990
  1891   0013D8                     u991:
  1892   0013D8  EF00  F00A         	goto	l1708
  1893   0013DC                     u990:
  1894   0013DC                     
  1895                           ; BSR set to: 0
  1896                           ;MRF89XAM.c: 270:                         param1_full = 1;
  1897   0013DC  0E01               	movlw	1
  1898   0013DE  6FF5               	movwf	MRF_parse_message@param1_full& (0+255),b
  1899   0013E0  EF00  F00A         	goto	l1708
  1900   0013E4                     l1706:
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;MRF89XAM.c: 273:                     append_string(MRF_param2, message[counter]);
  1904   0013E4  0EC6               	movlw	low _MRF_param2
  1905   0013E6  6FE4               	movwf	append_string@str& (0+255),b
  1906   0013E8  0E00               	movlw	high _MRF_param2
  1907   0013EA  6FE5               	movwf	(append_string@str+1)& (0+255),b
  1908   0013EC  51F6               	movf	MRF_parse_message@counter& (0+255),w,b
  1909   0013EE  25EB               	addwf	MRF_parse_message@message& (0+255),w,b
  1910   0013F0  6ED9               	movwf	fsr2l,c
  1911   0013F2  0E00               	movlw	0
  1912   0013F4  21EC               	addwfc	(MRF_parse_message@message+1)& (0+255),w,b
  1913   0013F6  6EDA               	movwf	fsr2h,c
  1914   0013F8  50DF               	movf	indf2,w,c
  1915   0013FA  6FE6               	movwf	append_string@ch& (0+255),b
  1916   0013FC  EC69  F00C         	call	_append_string	;wreg free
  1917   001400                     l1708:
  1918                           
  1919                           ;MRF89XAM.c: 275:         }
  1920   001400  0100               	movlb	0	; () banked
  1921   001402  2BF6               	incf	MRF_parse_message@counter& (0+255),f,b
  1922   001404                     l1710:
  1923                           
  1924                           ; BSR set to: 0
  1925   001404  51F4               	movf	MRF_parse_message@length& (0+255),w,b
  1926   001406  5DF6               	subwf	MRF_parse_message@counter& (0+255),w,b
  1927   001408  A0D8               	btfss	status,0,c
  1928   00140A  EF09  F00A         	goto	u1001
  1929   00140E  EF0B  F00A         	goto	u1000
  1930   001412                     u1001:
  1931   001412  EF7B  F009         	goto	l1690
  1932   001416                     u1000:
  1933   001416  EF4F  F00A         	goto	l254
  1934   00141A                     l1712:
  1935                           
  1936                           ; BSR set to: 0
  1937   00141A  C0EB  FFD9         	movff	MRF_parse_message@message,fsr2l
  1938   00141E  C0EC  FFDA         	movff	MRF_parse_message@message+1,fsr2h
  1939   001422  0E4A               	movlw	74
  1940   001424  18DE               	xorwf	postinc2,w,c
  1941   001426  A4D8               	btfss	status,2,c
  1942   001428  EF18  F00A         	goto	u1011
  1943   00142C  EF1A  F00A         	goto	u1010
  1944   001430                     u1011:
  1945   001430  EF4F  F00A         	goto	l233
  1946   001434                     u1010:
  1947   001434                     
  1948                           ; BSR set to: 0
  1949                           ;MRF89XAM.c: 278:     {;MRF89XAM.c: 279:         strcpy(MRF_param1, "");
  1950   001434  0ED0               	movlw	low _MRF_param1
  1951   001436  6FDA               	movwf	strcpy@dest& (0+255),b
  1952   001438  0E00               	movlw	high _MRF_param1
  1953   00143A  6FDB               	movwf	(strcpy@dest+1)& (0+255),b
  1954   00143C  0E13               	movlw	low (STR_11+2)
  1955   00143E  6FDC               	movwf	strcpy@src& (0+255),b
  1956   001440  0E10               	movlw	high (STR_11+2)
  1957   001442  6FDD               	movwf	(strcpy@src+1)& (0+255),b
  1958   001444  ECDA  F00C         	call	_strcpy	;wreg free
  1959                           
  1960                           ;MRF89XAM.c: 280:         strcpy(MRF_param2, "");
  1961   001448  0EC6               	movlw	low _MRF_param2
  1962   00144A  0100               	movlb	0	; () banked
  1963   00144C  6FDA               	movwf	strcpy@dest& (0+255),b
  1964   00144E  0E00               	movlw	high _MRF_param2
  1965   001450  6FDB               	movwf	(strcpy@dest+1)& (0+255),b
  1966   001452  0E13               	movlw	low (STR_11+2)
  1967   001454  6FDC               	movwf	strcpy@src& (0+255),b
  1968   001456  0E10               	movlw	high (STR_11+2)
  1969   001458  6FDD               	movwf	(strcpy@src+1)& (0+255),b
  1970   00145A  ECDA  F00C         	call	_strcpy	;wreg free
  1971                           
  1972                           ;MRF89XAM.c: 283:         append_string(MRF_param1, message[1]);
  1973   00145E  0ED0               	movlw	low _MRF_param1
  1974   001460  0100               	movlb	0	; () banked
  1975   001462  6FE4               	movwf	append_string@str& (0+255),b
  1976   001464  0E00               	movlw	high _MRF_param1
  1977   001466  6FE5               	movwf	(append_string@str+1)& (0+255),b
  1978   001468  EE20 F001          	lfsr	2,1
  1979   00146C  51EB               	movf	MRF_parse_message@message& (0+255),w,b
  1980   00146E  26D9               	addwf	fsr2l,f,c
  1981   001470  51EC               	movf	(MRF_parse_message@message+1)& (0+255),w,b
  1982   001472  22DA               	addwfc	fsr2h,f,c
  1983   001474  50DF               	movf	indf2,w,c
  1984   001476  6FE6               	movwf	append_string@ch& (0+255),b
  1985   001478  EC69  F00C         	call	_append_string	;wreg free
  1986                           
  1987                           ;MRF89XAM.c: 284:         append_string(MRF_param2, message[2]);
  1988   00147C  0EC6               	movlw	low _MRF_param2
  1989   00147E  0100               	movlb	0	; () banked
  1990   001480  6FE4               	movwf	append_string@str& (0+255),b
  1991   001482  0E00               	movlw	high _MRF_param2
  1992   001484  6FE5               	movwf	(append_string@str+1)& (0+255),b
  1993   001486  EE20 F002          	lfsr	2,2
  1994   00148A  51EB               	movf	MRF_parse_message@message& (0+255),w,b
  1995   00148C  26D9               	addwf	fsr2l,f,c
  1996   00148E  51EC               	movf	(MRF_parse_message@message+1)& (0+255),w,b
  1997   001490  22DA               	addwfc	fsr2h,f,c
  1998   001492  50DF               	movf	indf2,w,c
  1999   001494  6FE6               	movwf	append_string@ch& (0+255),b
  2000   001496  EC69  F00C         	call	_append_string	;wreg free
  2001   00149A  EFF3  F008         	goto	l1666
  2002   00149E                     l233:
  2003   00149E                     l254:
  2004   00149E  0012               	return		;funcret
  2005   0014A0                     __end_of_MRF_parse_message:
  2006                           	callstack 0
  2007                           
  2008 ;; *************** function _strcmp *****************
  2009 ;; Defined at:
  2010 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strcmp.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  l               2    0[BANK0 ] PTR const unsigned char 
  2013 ;;		 -> usb_message(40), main@MRF_msg_code(4), MRF_message(40), 
  2014 ;;  r               2    2[BANK0 ] PTR const unsigned char 
  2015 ;;		 -> STR_31(4), STR_29(3), STR_27(2), STR_20(4), 
  2016 ;;		 -> STR_18(4), STR_16(4), STR_14(2), STR_12(3), 
  2017 ;;		 -> STR_10(2), STR_6(1), STR_4(2), STR_2(4), 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;		None
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  2    0[BANK0 ] int 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2029 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;Total ram usage:        5 bytes
  2034 ;; Hardware stack levels used: 1
  2035 ;; Hardware stack levels required when called: 3
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_main
  2040 ;;		_MRF_parse_message
  2041 ;;		_parse_usb_message
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text6
  2046   001860                     __ptext6:
  2047                           	callstack 0
  2048   001860                     _strcmp:
  2049                           	callstack 27
  2050   001860  EF36  F00C         	goto	l1532
  2051   001864                     l1530:
  2052                           
  2053                           ; BSR set to: 0
  2054   001864  4BDA               	infsnz	strcmp@l& (0+255),f,b
  2055   001866  2BDB               	incf	(strcmp@l+1)& (0+255),f,b
  2056   001868  4BDC               	infsnz	strcmp@r& (0+255),f,b
  2057   00186A  2BDD               	incf	(strcmp@r+1)& (0+255),f,b
  2058   00186C                     l1532:
  2059   00186C  C0DA  FFD9         	movff	strcmp@l,fsr2l
  2060   001870  C0DB  FFDA         	movff	strcmp@l+1,fsr2h
  2061   001874  50DF               	movf	indf2,w,c
  2062   001876  0100               	movlb	0	; () banked
  2063   001878  6FDE               	movwf	??_strcmp& (0+255),b
  2064   00187A  C0DC  FFF6         	movff	strcmp@r,tblptrl
  2065   00187E  C0DD  FFF7         	movff	strcmp@r+1,tblptrh
  2066   001882                     	if	0	;tblptru may be non-zero
  2067   001882                     	endif
  2068   001882                     	if	0	;tblptru may be non-zero
  2069   001882                     	endif
  2070   001882  0008               	tblrd		*
  2071   001884  50F5               	movf	tablat,w,c
  2072   001886  19DE               	xorwf	??_strcmp& (0+255),w,b
  2073   001888  A4D8               	btfss	status,2,c
  2074   00188A  EF49  F00C         	goto	u751
  2075   00188E  EF4B  F00C         	goto	u750
  2076   001892                     u751:
  2077   001892  EF57  F00C         	goto	l1536
  2078   001896                     u750:
  2079   001896                     
  2080                           ; BSR set to: 0
  2081   001896  C0DA  FFD9         	movff	strcmp@l,fsr2l
  2082   00189A  C0DB  FFDA         	movff	strcmp@l+1,fsr2h
  2083   00189E  50DF               	movf	indf2,w,c
  2084   0018A0  A4D8               	btfss	status,2,c
  2085   0018A2  EF55  F00C         	goto	u761
  2086   0018A6  EF57  F00C         	goto	u760
  2087   0018AA                     u761:
  2088   0018AA  EF32  F00C         	goto	l1530
  2089   0018AE                     u760:
  2090   0018AE                     l1536:
  2091                           
  2092                           ; BSR set to: 0
  2093   0018AE  C0DA  FFD9         	movff	strcmp@l,fsr2l
  2094   0018B2  C0DB  FFDA         	movff	strcmp@l+1,fsr2h
  2095   0018B6  50DF               	movf	indf2,w,c
  2096   0018B8  6FDE               	movwf	??_strcmp& (0+255),b
  2097   0018BA  C0DC  FFF6         	movff	strcmp@r,tblptrl
  2098   0018BE  C0DD  FFF7         	movff	strcmp@r+1,tblptrh
  2099   0018C2                     	if	0	;tblptru may be non-zero
  2100   0018C2                     	endif
  2101   0018C2                     	if	0	;tblptru may be non-zero
  2102   0018C2                     	endif
  2103   0018C2  0008               	tblrd		*
  2104   0018C4  50F5               	movf	tablat,w,c
  2105   0018C6  5DDE               	subwf	??_strcmp& (0+255),w,b
  2106   0018C8  6FDA               	movwf	?_strcmp& (0+255),b
  2107   0018CA  6BDB               	clrf	(?_strcmp+1)& (0+255),b
  2108   0018CC  A0D8               	btfss	status,0,c
  2109   0018CE  07DB               	decf	(?_strcmp+1)& (0+255),f,b
  2110   0018D0                     
  2111                           ; BSR set to: 0
  2112   0018D0  0012               	return		;funcret
  2113   0018D2                     __end_of_strcmp:
  2114                           	callstack 0
  2115                           
  2116 ;; *************** function _isdigit *****************
  2117 ;; Defined at:
  2118 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  c               2    0[BANK0 ] int 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;		None
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  2    0[BANK0 ] int 
  2125 ;; Registers used:
  2126 ;;		wreg, status,2, status,0
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2132 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;Total ram usage:        4 bytes
  2137 ;; Hardware stack levels used: 1
  2138 ;; Hardware stack levels required when called: 3
  2139 ;; This function calls:
  2140 ;;		Nothing
  2141 ;; This function is called by:
  2142 ;;		_MRF_parse_message
  2143 ;;		_parse_usb_message
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text7
  2148   001B58                     __ptext7:
  2149                           	callstack 0
  2150   001B58                     _isdigit:
  2151                           	callstack 26
  2152   001B58  0ED0               	movlw	208
  2153   001B5A  0100               	movlb	0	; () banked
  2154   001B5C  25DA               	addwf	isdigit@c& (0+255),w,b
  2155   001B5E  6FDC               	movwf	??_isdigit& (0+255),b
  2156   001B60  0EFF               	movlw	255
  2157   001B62  21DB               	addwfc	(isdigit@c+1)& (0+255),w,b
  2158   001B64  6FDD               	movwf	(??_isdigit+1)& (0+255),b
  2159   001B66  51DD               	movf	(??_isdigit+1)& (0+255),w,b
  2160   001B68  E10A               	bnz	u790
  2161   001B6A  0E0A               	movlw	10
  2162   001B6C  5DDC               	subwf	??_isdigit& (0+255),w,b
  2163   001B6E  A0D8               	btfss	status,0,c
  2164   001B70  EFBC  F00D         	goto	u791
  2165   001B74  EFBF  F00D         	goto	u790
  2166   001B78                     u791:
  2167   001B78  0E01               	movlw	1
  2168   001B7A  EFC0  F00D         	goto	u800
  2169   001B7E                     u790:
  2170   001B7E  0E00               	movlw	0
  2171   001B80                     u800:
  2172   001B80  6FDA               	movwf	?_isdigit& (0+255),b
  2173   001B82  6BDB               	clrf	(?_isdigit+1)& (0+255),b
  2174   001B84                     
  2175                           ; BSR set to: 0
  2176   001B84  0012               	return		;funcret
  2177   001B86                     __end_of_isdigit:
  2178                           	callstack 0
  2179                           
  2180 ;; *************** function _append_string *****************
  2181 ;; Defined at:
  2182 ;;		line 14 in file "BeeBot_Globals.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;  str             2   10[BANK0 ] PTR unsigned char 
  2185 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2186 ;;		 -> ISR@temp_receive_string(40), usb_message(40), 
  2187 ;;  ch              1   12[BANK0 ] unsigned char 
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  length          2   15[BANK0 ] unsigned int 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2199 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;Total ram usage:        7 bytes
  2204 ;; Hardware stack levels used: 1
  2205 ;; Hardware stack levels required when called: 4
  2206 ;; This function calls:
  2207 ;;		_strcpy
  2208 ;;		_strlen
  2209 ;; This function is called by:
  2210 ;;		_MRF_parse_message
  2211 ;;		_parse_usb_message
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text8
  2216   0018D2                     __ptext8:
  2217                           	callstack 0
  2218   0018D2                     _append_string:
  2219                           	callstack 25
  2220   0018D2                     
  2221                           ;BeeBot_Globals.c: 14: void append_string(char *str, char ch);BeeBot_Globals.c: 15: {;Be
      +                          eBot_Globals.c: 16:     unsigned int length = strlen(str);
  2222   0018D2  C0E4  F0DA         	movff	append_string@str,strlen@s
  2223   0018D6  C0E5  F0DB         	movff	append_string@str+1,strlen@s+1
  2224   0018DA  EC5B  F00D         	call	_strlen	;wreg free
  2225   0018DE  C0DA  F0E9         	movff	?_strlen,append_string@length
  2226   0018E2  C0DB  F0EA         	movff	?_strlen+1,append_string@length+1
  2227   0018E6                     
  2228                           ;BeeBot_Globals.c: 17:     if(length < 40 - 1)
  2229   0018E6  0100               	movlb	0	; () banked
  2230   0018E8  51EA               	movf	(append_string@length+1)& (0+255),w,b
  2231   0018EA  E107               	bnz	u771
  2232   0018EC  0E27               	movlw	39
  2233   0018EE  5DE9               	subwf	append_string@length& (0+255),w,b
  2234   0018F0  B0D8               	btfsc	status,0,c
  2235   0018F2  EF7D  F00C         	goto	u771
  2236   0018F6  EF7F  F00C         	goto	u770
  2237   0018FA                     u771:
  2238   0018FA  EF97  F00C         	goto	l1546
  2239   0018FE                     u770:
  2240   0018FE                     
  2241                           ; BSR set to: 0
  2242                           ;BeeBot_Globals.c: 18:     {;BeeBot_Globals.c: 19:         str[length] = ch;
  2243   0018FE  51E9               	movf	append_string@length& (0+255),w,b
  2244   001900  25E4               	addwf	append_string@str& (0+255),w,b
  2245   001902  6ED9               	movwf	fsr2l,c
  2246   001904  51EA               	movf	(append_string@length+1)& (0+255),w,b
  2247   001906  21E5               	addwfc	(append_string@str+1)& (0+255),w,b
  2248   001908  6EDA               	movwf	fsr2h,c
  2249   00190A  C0E6  FFDF         	movff	append_string@ch,indf2
  2250                           
  2251                           ;BeeBot_Globals.c: 20:         str[length + 1] = '\0';
  2252   00190E  51E9               	movf	append_string@length& (0+255),w,b
  2253   001910  25E4               	addwf	append_string@str& (0+255),w,b
  2254   001912  6FE7               	movwf	??_append_string& (0+255),b
  2255   001914  51EA               	movf	(append_string@length+1)& (0+255),w,b
  2256   001916  21E5               	addwfc	(append_string@str+1)& (0+255),w,b
  2257   001918  6FE8               	movwf	(??_append_string+1)& (0+255),b
  2258   00191A  0E01               	movlw	1
  2259   00191C  25E7               	addwf	??_append_string& (0+255),w,b
  2260   00191E  6ED9               	movwf	fsr2l,c
  2261   001920  0E00               	movlw	0
  2262   001922  21E8               	addwfc	(??_append_string+1)& (0+255),w,b
  2263   001924  6EDA               	movwf	fsr2h,c
  2264   001926  0E00               	movlw	0
  2265   001928  6EDF               	movwf	indf2,c
  2266                           
  2267                           ;BeeBot_Globals.c: 21:     }
  2268   00192A  EFA1  F00C         	goto	l263
  2269   00192E                     l1546:
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;BeeBot_Globals.c: 23:         strcpy(str, "");
  2273   00192E  C0E4  F0DA         	movff	append_string@str,strcpy@dest
  2274   001932  C0E5  F0DB         	movff	append_string@str+1,strcpy@dest+1
  2275   001936  0E13               	movlw	low (STR_11+2)
  2276   001938  6FDC               	movwf	strcpy@src& (0+255),b
  2277   00193A  0E10               	movlw	high (STR_11+2)
  2278   00193C  6FDD               	movwf	(strcpy@src+1)& (0+255),b
  2279   00193E  ECDA  F00C         	call	_strcpy	;wreg free
  2280   001942                     l263:
  2281   001942  0012               	return		;funcret
  2282   001944                     __end_of_append_string:
  2283                           	callstack 0
  2284                           
  2285 ;; *************** function _strlen *****************
  2286 ;; Defined at:
  2287 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strlen.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  2290 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2291 ;;		 -> ISR@temp_receive_string(40), usb_message(40), MRF_message(40), 
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  a               2    2[BANK0 ] PTR const unsigned char 
  2294 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2295 ;;		 -> ISR@temp_receive_string(40), usb_message(40), MRF_message(40), 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  2    0[BANK0 ] unsigned int 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2305 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;Total ram usage:        4 bytes
  2310 ;; Hardware stack levels used: 1
  2311 ;; Hardware stack levels required when called: 3
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_MRF_parse_message
  2316 ;;		_append_string
  2317 ;;		_transmit_string_MRF89XAM
  2318 ;;		_transmit_string_usb
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text9
  2323   001AB6                     __ptext9:
  2324                           	callstack 0
  2325   001AB6                     _strlen:
  2326                           	callstack 25
  2327   001AB6  C0DA  F0DC         	movff	strlen@s,strlen@a
  2328   001ABA  C0DB  F0DD         	movff	strlen@s+1,strlen@a+1
  2329   001ABE  EF64  F00D         	goto	l1522
  2330   001AC2                     l1520:
  2331   001AC2  0100               	movlb	0	; () banked
  2332   001AC4  4BDA               	infsnz	strlen@s& (0+255),f,b
  2333   001AC6  2BDB               	incf	(strlen@s+1)& (0+255),f,b
  2334   001AC8                     l1522:
  2335   001AC8  C0DA  FFD9         	movff	strlen@s,fsr2l
  2336   001ACC  C0DB  FFDA         	movff	strlen@s+1,fsr2h
  2337   001AD0  50DF               	movf	indf2,w,c
  2338   001AD2  A4D8               	btfss	status,2,c
  2339   001AD4  EF6E  F00D         	goto	u741
  2340   001AD8  EF70  F00D         	goto	u740
  2341   001ADC                     u741:
  2342   001ADC  EF61  F00D         	goto	l1520
  2343   001AE0                     u740:
  2344   001AE0  0100               	movlb	0	; () banked
  2345   001AE2  51DC               	movf	strlen@a& (0+255),w,b
  2346   001AE4  5DDA               	subwf	strlen@s& (0+255),w,b
  2347   001AE6  6FDA               	movwf	?_strlen& (0+255),b
  2348   001AE8  51DD               	movf	(strlen@a+1)& (0+255),w,b
  2349   001AEA  59DB               	subwfb	(strlen@s+1)& (0+255),w,b
  2350   001AEC  6FDB               	movwf	(?_strlen+1)& (0+255),b
  2351   001AEE                     
  2352                           ; BSR set to: 0
  2353   001AEE  0012               	return		;funcret
  2354   001AF0                     __end_of_strlen:
  2355                           	callstack 0
  2356                           
  2357 ;; *************** function _strcpy *****************
  2358 ;; Defined at:
  2359 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strcpy.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  dest            2    0[BANK0 ] PTR unsigned char 
  2362 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2363 ;;		 -> ISR@temp_receive_string(40), usb_message(40), main@MRF_msg_code(4), MRF_message(40), 
  2364 ;;  src             2    2[BANK0 ] PTR const unsigned char 
  2365 ;;		 -> STR_25(1), STR_24(1), STR_23(1), STR_22(1), 
  2366 ;;		 -> STR_21(1), ISR@temp_receive_string(40), STR_8(1), STR_7(1), 
  2367 ;;		 -> MRF_message(40), 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  d               2    8[BANK0 ] PTR unsigned char 
  2370 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2371 ;;		 -> ISR@temp_receive_string(40), usb_message(40), main@MRF_msg_code(4), MRF_message(40), 
  2372 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  2373 ;;		 -> STR_25(1), STR_24(1), STR_23(1), STR_22(1), 
  2374 ;;		 -> STR_21(1), ISR@temp_receive_string(40), STR_8(1), STR_7(1), 
  2375 ;;		 -> MRF_message(40), 
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  2    0[BANK0 ] PTR unsigned char 
  2378 ;; Registers used:
  2379 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2385 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;Total ram usage:       10 bytes
  2390 ;; Hardware stack levels used: 1
  2391 ;; Hardware stack levels required when called: 3
  2392 ;; This function calls:
  2393 ;;		Nothing
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;;		_MRF_parse_message
  2397 ;;		_append_string
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text10
  2402   0019B4                     __ptext10:
  2403                           	callstack 0
  2404   0019B4                     _strcpy:
  2405                           	callstack 27
  2406   0019B4  C0DC  F0E0         	movff	strcpy@src,strcpy@s
  2407   0019B8  C0DD  F0E1         	movff	strcpy@src+1,strcpy@s+1
  2408   0019BC  C0DA  F0E2         	movff	strcpy@dest,strcpy@d
  2409   0019C0  C0DB  F0E3         	movff	strcpy@dest+1,strcpy@d+1
  2410   0019C4                     l1516:
  2411   0019C4  0100               	movlb	0	; () banked
  2412   0019C6  51E0               	movf	strcpy@s& (0+255),w,b
  2413   0019C8  6FDE               	movwf	??_strcpy& (0+255),b
  2414   0019CA  51E1               	movf	(strcpy@s+1)& (0+255),w,b
  2415   0019CC  6FDF               	movwf	(??_strcpy+1)& (0+255),b
  2416   0019CE  4BE0               	infsnz	strcpy@s& (0+255),f,b
  2417   0019D0  2BE1               	incf	(strcpy@s+1)& (0+255),f,b
  2418   0019D2  C0DE  FFF6         	movff	??_strcpy,tblptrl
  2419   0019D6  C0DF  FFF7         	movff	??_strcpy+1,tblptrh
  2420   0019DA  0E00               	movlw	low (__smallconst shr (0+16))
  2421   0019DC  6EF8               	movwf	tblptru,c
  2422   0019DE  C0E2  FFD9         	movff	strcpy@d,fsr2l
  2423   0019E2  C0E3  FFDA         	movff	strcpy@d+1,fsr2h
  2424   0019E6  4BE2               	infsnz	strcpy@d& (0+255),f,b
  2425   0019E8  2BE3               	incf	(strcpy@d+1)& (0+255),f,b
  2426   0019EA  0E0F               	movlw	(high __ramtop+-1)
  2427   0019EC  64F7               	cpfsgt	tblptrh,c
  2428   0019EE  D003               	bra	u727
  2429   0019F0  0008               	tblrd		*
  2430   0019F2  50F5               	movf	tablat,w,c
  2431   0019F4  D005               	bra	u720
  2432   0019F6                     u727:
  2433   0019F6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2434   0019FA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2435   0019FE  50EF               	movf	indf0,w,c
  2436   001A00                     u720:
  2437   001A00  6EDF               	movwf	indf2,c
  2438   001A02  50DF               	movf	indf2,w,c
  2439   001A04  A4D8               	btfss	status,2,c
  2440   001A06  EF07  F00D         	goto	u731
  2441   001A0A  EF09  F00D         	goto	u730
  2442   001A0E                     u731:
  2443   001A0E  EFE2  F00C         	goto	l1516
  2444   001A12                     u730:
  2445   001A12  0012               	return		;funcret
  2446   001A14                     __end_of_strcpy:
  2447                           	callstack 0
  2448                           
  2449 ;; *************** function _ISR *****************
  2450 ;; Defined at:
  2451 ;;		line 260 in file "BeeBot_Main.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  temp_receive   40   27[COMRAM] unsigned char [40]
  2456 ;;  MRF_input       1   68[COMRAM] unsigned char 
  2457 ;;  usb_input       1   67[COMRAM] unsigned char 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2469 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Totals:        52       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;Total ram usage:       52 bytes
  2472 ;; Hardware stack levels used: 1
  2473 ;; Hardware stack levels required when called: 2
  2474 ;; This function calls:
  2475 ;;		_read_byte_usb
  2476 ;;		_receive_MRF89XAM
  2477 ;;		i2_append_string
  2478 ;;		i2_strcpy
  2479 ;; This function is called by:
  2480 ;;		Interrupt level 2
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	intcode
  2485   000008                     __pintcode:
  2486                           	callstack 0
  2487   000008                     _ISR:
  2488                           	callstack 25
  2489                           
  2490                           ;incstack = 0
  2491   000008  824B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2492   00000A  CFE9 F012          	movff	fsr0l,??_ISR
  2493   00000E  CFEA F013          	movff	fsr0h,??_ISR+1
  2494   000012  CFE1 F014          	movff	fsr1l,??_ISR+2
  2495   000016  CFE2 F015          	movff	fsr1h,??_ISR+3
  2496   00001A  CFD9 F016          	movff	fsr2l,??_ISR+4
  2497   00001E  CFDA F017          	movff	fsr2h,??_ISR+5
  2498   000022  CFF6 F018          	movff	tblptrl,??_ISR+6
  2499   000026  CFF7 F019          	movff	tblptrh,??_ISR+7
  2500   00002A  CFF8 F01A          	movff	tblptru,??_ISR+8
  2501   00002E  CFF5 F01B          	movff	tablat,??_ISR+9
  2502   000032                     
  2503                           ;BeeBot_Main.c: 263:     char temp_receive_string[40] = "";
  2504   000032  EE21  F000         	lfsr	2,ISR@F6726
  2505   000036  EE10  F01C         	lfsr	1,ISR@temp_receive_string
  2506   00003A  0E27               	movlw	39
  2507   00003C                     i2u124_41:
  2508   00003C  CFDB FFE3          	movff	plusw2,plusw1
  2509   000040  06E8               	decf	wreg,f,c
  2510   000042  E2FC               	bc	i2u124_41
  2511   000044                     
  2512                           ;BeeBot_Main.c: 268:     if(PIR1bits.RC1IF && PIE1bits.RC1IE)
  2513   000044  AA9E               	btfss	158,5,c	;volatile
  2514   000046  EF27  F000         	goto	i2u125_41
  2515   00004A  EF29  F000         	goto	i2u125_40
  2516   00004E                     i2u125_41:
  2517   00004E  EF3B  F000         	goto	i2l1852
  2518   000052                     i2u125_40:
  2519   000052  AA9D               	btfss	157,5,c	;volatile
  2520   000054  EF2E  F000         	goto	i2u126_41
  2521   000058  EF30  F000         	goto	i2u126_40
  2522   00005C                     i2u126_41:
  2523   00005C  EF3B  F000         	goto	i2l1852
  2524   000060                     i2u126_40:
  2525   000060                     
  2526                           ;BeeBot_Main.c: 269:     {;BeeBot_Main.c: 270:         usb_input = read_byte_usb();
  2527   000060  ECE1  F00D         	call	_read_byte_usb	;wreg free
  2528   000064  6E44               	movwf	ISR@usb_input^0,c
  2529   000066                     
  2530                           ;BeeBot_Main.c: 271:         append_string(usb_message, usb_input);
  2531   000066  0E62               	movlw	low _usb_message
  2532   000068  6E0B               	movwf	i2append_string@str^0,c
  2533   00006A  0E00               	movlw	high _usb_message
  2534   00006C  6E0C               	movwf	(i2append_string@str+1)^0,c
  2535   00006E  C044  F00D         	movff	ISR@usb_input,i2append_string@ch
  2536   000072  ECA2  F00C         	call	i2_append_string	;wreg free
  2537   000076                     i2l1852:
  2538                           
  2539                           ;BeeBot_Main.c: 275:     if(TMR0IE && TMR0IF)
  2540   000076  AAF2               	btfss	4082,5,c	;volatile
  2541   000078  EF40  F000         	goto	i2u127_41
  2542   00007C  EF42  F000         	goto	i2u127_40
  2543   000080                     i2u127_41:
  2544   000080  EF50  F000         	goto	i2l1864
  2545   000084                     i2u127_40:
  2546   000084  A4F2               	btfss	4082,2,c	;volatile
  2547   000086  EF47  F000         	goto	i2u128_41
  2548   00008A  EF49  F000         	goto	i2u128_40
  2549   00008E                     i2u128_41:
  2550   00008E  EF50  F000         	goto	i2l1864
  2551   000092                     i2u128_40:
  2552   000092                     
  2553                           ;BeeBot_Main.c: 276:     {;BeeBot_Main.c: 277:         TMR0IF = 0;
  2554   000092  94F2               	bcf	4082,2,c	;volatile
  2555   000094                     
  2556                           ;BeeBot_Main.c: 278:         timer_tick++;
  2557   000094  4A46               	infsnz	_timer_tick^0,f,c
  2558   000096  2A47               	incf	(_timer_tick+1)^0,f,c
  2559   000098                     
  2560                           ;BeeBot_Main.c: 279:         TMR0H = 0xF8;
  2561   000098  0EF8               	movlw	248
  2562   00009A  6ED7               	movwf	215,c	;volatile
  2563   00009C                     
  2564                           ;BeeBot_Main.c: 280:         TMR0L = 0x2F;
  2565   00009C  0E2F               	movlw	47
  2566   00009E  6ED6               	movwf	214,c	;volatile
  2567   0000A0                     i2l1864:
  2568                           
  2569                           ;BeeBot_Main.c: 284:     if(INTCON3bits.INT1F && !MRF_transmitting)
  2570   0000A0  A0F0               	btfss	240,0,c	;volatile
  2571   0000A2  EF55  F000         	goto	i2u129_41
  2572   0000A6  EF57  F000         	goto	i2u129_40
  2573   0000AA                     i2u129_41:
  2574   0000AA  EF83  F000         	goto	i2l137
  2575   0000AE                     i2u129_40:
  2576   0000AE  504A               	movf	_MRF_transmitting^0,w,c
  2577   0000B0  A4D8               	btfss	status,2,c
  2578   0000B2  EF5D  F000         	goto	i2u130_41
  2579   0000B6  EF5F  F000         	goto	i2u130_40
  2580   0000BA                     i2u130_41:
  2581   0000BA  EF83  F000         	goto	i2l137
  2582   0000BE                     i2u130_40:
  2583   0000BE                     
  2584                           ;BeeBot_Main.c: 285:     {;BeeBot_Main.c: 286:         INTCON3bits.INT1F = 0;
  2585   0000BE  90F0               	bcf	240,0,c	;volatile
  2586   0000C0                     
  2587                           ;BeeBot_Main.c: 287:         MRF_input = (char) receive_MRF89XAM();
  2588   0000C0  ECF9  F00D         	call	_receive_MRF89XAM	;wreg free
  2589   0000C4  6E45               	movwf	ISR@MRF_input^0,c
  2590   0000C6                     
  2591                           ;BeeBot_Main.c: 288:         if(MRF_input == '\n')
  2592   0000C6  0E0A               	movlw	10
  2593   0000C8  1845               	xorwf	ISR@MRF_input^0,w,c
  2594   0000CA  A4D8               	btfss	status,2,c
  2595   0000CC  EF6A  F000         	goto	i2u131_41
  2596   0000D0  EF6C  F000         	goto	i2u131_40
  2597   0000D4                     i2u131_41:
  2598   0000D4  EF7B  F000         	goto	i2l1878
  2599   0000D8                     i2u131_40:
  2600   0000D8                     
  2601                           ;BeeBot_Main.c: 289:         {;BeeBot_Main.c: 290:             MRF_message_received = 1;
  2602   0000D8  0E01               	movlw	1
  2603   0000DA  0100               	movlb	0	; () banked
  2604   0000DC  6F61               	movwf	_MRF_message_received& (0+255),b
  2605   0000DE                     
  2606                           ; BSR set to: 0
  2607                           ;BeeBot_Main.c: 291:             strcpy(MRF_message, temp_receive_string);
  2608   0000DE  0E8A               	movlw	low _MRF_message
  2609   0000E0  6E01               	movwf	i2strcpy@dest^0,c
  2610   0000E2  0E00               	movlw	high _MRF_message
  2611   0000E4  6E02               	movwf	(i2strcpy@dest+1)^0,c
  2612   0000E6  0E1C               	movlw	low ISR@temp_receive_string
  2613   0000E8  6E03               	movwf	i2strcpy@src^0,c
  2614   0000EA  0E00               	movlw	high ISR@temp_receive_string
  2615   0000EC  6E04               	movwf	(i2strcpy@src+1)^0,c
  2616   0000EE  EC0A  F00D         	call	i2_strcpy	;wreg free
  2617                           
  2618                           ;BeeBot_Main.c: 292:         }
  2619   0000F2  EF83  F000         	goto	i2l137
  2620   0000F6                     i2l1878:
  2621                           
  2622                           ;BeeBot_Main.c: 294:             append_string(temp_receive_string, MRF_input);
  2623   0000F6  0E1C               	movlw	low ISR@temp_receive_string
  2624   0000F8  6E0B               	movwf	i2append_string@str^0,c
  2625   0000FA  0E00               	movlw	high ISR@temp_receive_string
  2626   0000FC  6E0C               	movwf	(i2append_string@str+1)^0,c
  2627   0000FE  C045  F00D         	movff	ISR@MRF_input,i2append_string@ch
  2628   000102  ECA2  F00C         	call	i2_append_string	;wreg free
  2629   000106                     i2l137:
  2630   000106  C01B  FFF5         	movff	??_ISR+9,tablat
  2631   00010A  C01A  FFF8         	movff	??_ISR+8,tblptru
  2632   00010E  C019  FFF7         	movff	??_ISR+7,tblptrh
  2633   000112  C018  FFF6         	movff	??_ISR+6,tblptrl
  2634   000116  C017  FFDA         	movff	??_ISR+5,fsr2h
  2635   00011A  C016  FFD9         	movff	??_ISR+4,fsr2l
  2636   00011E  C015  FFE2         	movff	??_ISR+3,fsr1h
  2637   000122  C014  FFE1         	movff	??_ISR+2,fsr1l
  2638   000126  C013  FFEA         	movff	??_ISR+1,fsr0h
  2639   00012A  C012  FFE9         	movff	??_ISR,fsr0l
  2640   00012E  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2641   000130  0011               	retfie		f
  2642   000132                     __end_of_ISR:
  2643                           	callstack 0
  2644                           
  2645 ;; *************** function i2_append_string *****************
  2646 ;; Defined at:
  2647 ;;		line 14 in file "BeeBot_Globals.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  str             2   10[COMRAM] PTR unsigned char 
  2650 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2651 ;;		 -> ISR@temp_receive_string(40), usb_message(40), 
  2652 ;;  ch              1   12[COMRAM] unsigned char 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  length          2   15[COMRAM] unsigned int 
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2664 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;Total ram usage:        7 bytes
  2669 ;; Hardware stack levels used: 1
  2670 ;; Hardware stack levels required when called: 1
  2671 ;; This function calls:
  2672 ;;		i2_strcpy
  2673 ;;		i2_strlen
  2674 ;; This function is called by:
  2675 ;;		_ISR
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           	psect	text12
  2680   001944                     __ptext12:
  2681                           	callstack 0
  2682   001944                     i2_append_string:
  2683                           	callstack 25
  2684   001944                     
  2685                           ;BeeBot_Globals.c: 14: void append_string(char *str, char ch);BeeBot_Globals.c: 15: {;Be
      +                          eBot_Globals.c: 16:     unsigned int length = strlen(str);
  2686   001944  C00B  F001         	movff	i2append_string@str,i2strlen@s
  2687   001948  C00C  F002         	movff	i2append_string@str+1,i2strlen@s+1
  2688   00194C  EC78  F00D         	call	i2_strlen	;wreg free
  2689   001950  C001  F010         	movff	?i2_strlen,i2append_string@length
  2690   001954  C002  F011         	movff	?i2_strlen+1,i2append_string@length+1
  2691   001958                     
  2692                           ;BeeBot_Globals.c: 17:     if(length < 40 - 1)
  2693   001958  5011               	movf	(i2append_string@length+1)^0,w,c
  2694   00195A  E107               	bnz	i2u116_41
  2695   00195C  0E27               	movlw	39
  2696   00195E  5C10               	subwf	i2append_string@length^0,w,c
  2697   001960  B0D8               	btfsc	status,0,c
  2698   001962  EFB5  F00C         	goto	i2u116_41
  2699   001966  EFB7  F00C         	goto	i2u116_40
  2700   00196A                     i2u116_41:
  2701   00196A  EFCF  F00C         	goto	i2l1786
  2702   00196E                     i2u116_40:
  2703   00196E                     
  2704                           ;BeeBot_Globals.c: 18:     {;BeeBot_Globals.c: 19:         str[length] = ch;
  2705   00196E  5010               	movf	i2append_string@length^0,w,c
  2706   001970  240B               	addwf	i2append_string@str^0,w,c
  2707   001972  6ED9               	movwf	fsr2l,c
  2708   001974  5011               	movf	(i2append_string@length+1)^0,w,c
  2709   001976  200C               	addwfc	(i2append_string@str+1)^0,w,c
  2710   001978  6EDA               	movwf	fsr2h,c
  2711   00197A  C00D  FFDF         	movff	i2append_string@ch,indf2
  2712                           
  2713                           ;BeeBot_Globals.c: 20:         str[length + 1] = '\0';
  2714   00197E  5010               	movf	i2append_string@length^0,w,c
  2715   001980  240B               	addwf	i2append_string@str^0,w,c
  2716   001982  6E0E               	movwf	??i2_append_string^0,c
  2717   001984  5011               	movf	(i2append_string@length+1)^0,w,c
  2718   001986  200C               	addwfc	(i2append_string@str+1)^0,w,c
  2719   001988  6E0F               	movwf	(??i2_append_string+1)^0,c
  2720   00198A  0E01               	movlw	1
  2721   00198C  240E               	addwf	??i2_append_string^0,w,c
  2722   00198E  6ED9               	movwf	fsr2l,c
  2723   001990  0E00               	movlw	0
  2724   001992  200F               	addwfc	(??i2_append_string+1)^0,w,c
  2725   001994  6EDA               	movwf	fsr2h,c
  2726   001996  0E00               	movlw	0
  2727   001998  6EDF               	movwf	indf2,c
  2728                           
  2729                           ;BeeBot_Globals.c: 21:     }
  2730   00199A  EFD9  F00C         	goto	i2l263
  2731   00199E                     i2l1786:
  2732                           
  2733                           ;BeeBot_Globals.c: 23:         strcpy(str, "");
  2734   00199E  C00B  F001         	movff	i2append_string@str,i2strcpy@dest
  2735   0019A2  C00C  F002         	movff	i2append_string@str+1,i2strcpy@dest+1
  2736   0019A6  0E13               	movlw	low (STR_11+2)
  2737   0019A8  6E03               	movwf	i2strcpy@src^0,c
  2738   0019AA  0E10               	movlw	high (STR_11+2)
  2739   0019AC  6E04               	movwf	(i2strcpy@src+1)^0,c
  2740   0019AE  EC0A  F00D         	call	i2_strcpy	;wreg free
  2741   0019B2                     i2l263:
  2742   0019B2  0012               	return		;funcret
  2743   0019B4                     __end_ofi2_append_string:
  2744                           	callstack 0
  2745                           
  2746 ;; *************** function i2_strlen *****************
  2747 ;; Defined at:
  2748 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strlen.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2751 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2752 ;;		 -> ISR@temp_receive_string(40), usb_message(40), MRF_message(40), 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2755 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2756 ;;		 -> ISR@temp_receive_string(40), usb_message(40), MRF_message(40), 
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  2    0[COMRAM] unsigned int 
  2759 ;; Registers used:
  2760 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;Total ram usage:        4 bytes
  2771 ;; Hardware stack levels used: 1
  2772 ;; This function calls:
  2773 ;;		Nothing
  2774 ;; This function is called by:
  2775 ;;		i2_append_string
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text13
  2780   001AF0                     __ptext13:
  2781                           	callstack 0
  2782   001AF0                     i2_strlen:
  2783                           	callstack 25
  2784   001AF0  C001  F003         	movff	i2strlen@s,i2strlen@a
  2785   001AF4  C002  F004         	movff	i2strlen@s+1,i2strlen@a+1
  2786   001AF8  EF80  F00D         	goto	i2l1572
  2787   001AFC                     i2l1570:
  2788   001AFC  4A01               	infsnz	i2strlen@s^0,f,c
  2789   001AFE  2A02               	incf	(i2strlen@s+1)^0,f,c
  2790   001B00                     i2l1572:
  2791   001B00  C001  FFD9         	movff	i2strlen@s,fsr2l
  2792   001B04  C002  FFDA         	movff	i2strlen@s+1,fsr2h
  2793   001B08  50DF               	movf	indf2,w,c
  2794   001B0A  A4D8               	btfss	status,2,c
  2795   001B0C  EF8A  F00D         	goto	i2u83_41
  2796   001B10  EF8C  F00D         	goto	i2u83_40
  2797   001B14                     i2u83_41:
  2798   001B14  EF7E  F00D         	goto	i2l1570
  2799   001B18                     i2u83_40:
  2800   001B18  5003               	movf	i2strlen@a^0,w,c
  2801   001B1A  5C01               	subwf	i2strlen@s^0,w,c
  2802   001B1C  6E01               	movwf	?i2_strlen^0,c
  2803   001B1E  5004               	movf	(i2strlen@a+1)^0,w,c
  2804   001B20  5802               	subwfb	(i2strlen@s+1)^0,w,c
  2805   001B22  6E02               	movwf	(?i2_strlen+1)^0,c
  2806   001B24  0012               	return		;funcret
  2807   001B26                     __end_ofi2_strlen:
  2808                           	callstack 0
  2809                           
  2810 ;; *************** function i2_strcpy *****************
  2811 ;; Defined at:
  2812 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\strcpy.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  dest            2    0[COMRAM] PTR unsigned char 
  2815 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2816 ;;		 -> ISR@temp_receive_string(40), usb_message(40), main@MRF_msg_code(4), MRF_message(40), 
  2817 ;;  src             2    2[COMRAM] PTR const unsigned char 
  2818 ;;		 -> STR_25(1), STR_24(1), STR_23(1), STR_22(1), 
  2819 ;;		 -> STR_21(1), ISR@temp_receive_string(40), STR_8(1), STR_7(1), 
  2820 ;;		 -> MRF_message(40), 
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  d               2    8[COMRAM] PTR unsigned char 
  2823 ;;		 -> USB_param2(10), USB_param1(10), MRF_param2(10), MRF_param1(10), 
  2824 ;;		 -> ISR@temp_receive_string(40), usb_message(40), main@MRF_msg_code(4), MRF_message(40), 
  2825 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2826 ;;		 -> STR_25(1), STR_24(1), STR_23(1), STR_22(1), 
  2827 ;;		 -> STR_21(1), ISR@temp_receive_string(40), STR_8(1), STR_7(1), 
  2828 ;;		 -> MRF_message(40), 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  2    0[COMRAM] PTR unsigned char 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2838 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;Total ram usage:       10 bytes
  2843 ;; Hardware stack levels used: 1
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_ISR
  2848 ;;		i2_append_string
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text14
  2853   001A14                     __ptext14:
  2854                           	callstack 0
  2855   001A14                     i2_strcpy:
  2856                           	callstack 26
  2857   001A14  C003  F007         	movff	i2strcpy@src,i2strcpy@s
  2858   001A18  C004  F008         	movff	i2strcpy@src+1,i2strcpy@s+1
  2859   001A1C  C001  F009         	movff	i2strcpy@dest,i2strcpy@d
  2860   001A20  C002  F00A         	movff	i2strcpy@dest+1,i2strcpy@d+1
  2861   001A24                     i2l1566:
  2862   001A24  5007               	movf	i2strcpy@s^0,w,c
  2863   001A26  6E05               	movwf	??i2_strcpy^0,c
  2864   001A28  5008               	movf	(i2strcpy@s+1)^0,w,c
  2865   001A2A  6E06               	movwf	(??i2_strcpy+1)^0,c
  2866   001A2C  4A07               	infsnz	i2strcpy@s^0,f,c
  2867   001A2E  2A08               	incf	(i2strcpy@s+1)^0,f,c
  2868   001A30  C005  FFF6         	movff	??i2_strcpy,tblptrl
  2869   001A34  C006  FFF7         	movff	??i2_strcpy+1,tblptrh
  2870   001A38  0E00               	movlw	low (__smallconst shr (0+16))
  2871   001A3A  6EF8               	movwf	tblptru,c
  2872   001A3C  C009  FFD9         	movff	i2strcpy@d,fsr2l
  2873   001A40  C00A  FFDA         	movff	i2strcpy@d+1,fsr2h
  2874   001A44  4A09               	infsnz	i2strcpy@d^0,f,c
  2875   001A46  2A0A               	incf	(i2strcpy@d+1)^0,f,c
  2876   001A48  0E0F               	movlw	(high __ramtop+-1)
  2877   001A4A  64F7               	cpfsgt	tblptrh,c
  2878   001A4C  D003               	bra	i2u81_47
  2879   001A4E  0008               	tblrd		*
  2880   001A50  50F5               	movf	tablat,w,c
  2881   001A52  D005               	bra	i2u81_40
  2882   001A54                     i2u81_47:
  2883   001A54  CFF6 FFE9          	movff	tblptrl,fsr0l
  2884   001A58  CFF7 FFEA          	movff	tblptrh,fsr0h
  2885   001A5C  50EF               	movf	indf0,w,c
  2886   001A5E                     i2u81_40:
  2887   001A5E  6EDF               	movwf	indf2,c
  2888   001A60  50DF               	movf	indf2,w,c
  2889   001A62  A4D8               	btfss	status,2,c
  2890   001A64  EF36  F00D         	goto	i2u82_41
  2891   001A68  EF38  F00D         	goto	i2u82_40
  2892   001A6C                     i2u82_41:
  2893   001A6C  EF12  F00D         	goto	i2l1566
  2894   001A70                     i2u82_40:
  2895   001A70  0012               	return		;funcret
  2896   001A72                     __end_ofi2_strcpy:
  2897                           	callstack 0
  2898                           
  2899 ;; *************** function _receive_MRF89XAM *****************
  2900 ;; Defined at:
  2901 ;;		line 171 in file "MRF89XAM.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;		None
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      unsigned char 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;Total ram usage:        0 bytes
  2920 ;; Hardware stack levels used: 1
  2921 ;; Hardware stack levels required when called: 1
  2922 ;; This function calls:
  2923 ;;		_read_spi_data
  2924 ;; This function is called by:
  2925 ;;		_ISR
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text15
  2930   001BF2                     __ptext15:
  2931                           	callstack 0
  2932   001BF2                     _receive_MRF89XAM:
  2933                           	callstack 25
  2934   001BF2                     i2l216:
  2935   001BF2  BA81               	btfsc	129,5,c	;volatile
  2936   001BF4  EFFE  F00D         	goto	i2u115_41
  2937   001BF8  EF00  F00E         	goto	i2u115_40
  2938   001BFC                     i2u115_41:
  2939   001BFC  EFF9  F00D         	goto	i2l216
  2940   001C00                     i2u115_40:
  2941   001C00                     
  2942                           ;MRF89XAM.c: 174:     return read_spi_data();
  2943   001C00  ECC3  F00D         	call	_read_spi_data	;wreg free
  2944   001C04  0012               	return		;funcret
  2945   001C06                     __end_of_receive_MRF89XAM:
  2946                           	callstack 0
  2947                           
  2948 ;; *************** function _read_spi_data *****************
  2949 ;; Defined at:
  2950 ;;		line 98 in file "MRF89XAM.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;		None
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  data            1    0[COMRAM] unsigned char 
  2955 ;;  dummy           1    0        unsigned char 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      unsigned char 
  2958 ;; Registers used:
  2959 ;;		wreg, status,2
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;Total ram usage:        1 bytes
  2970 ;; Hardware stack levels used: 1
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_receive_MRF89XAM
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text16
  2979   001B86                     __ptext16:
  2980                           	callstack 0
  2981   001B86                     _read_spi_data:
  2982                           	callstack 25
  2983   001B86                     
  2984                           ;MRF89XAM.c: 104:     LATCbits.LC1 = 0;
  2985   001B86  928B               	bcf	139,1,c	;volatile
  2986   001B88  506F               	movf	111,w,c	;volatile
  2987                           
  2988                           ;MRF89XAM.c: 108:     SSP2BUF = 0x00;
  2989   001B8A  0E00               	movlw	0
  2990   001B8C  6E6F               	movwf	111,c	;volatile
  2991   001B8E                     i2l192:
  2992   001B8E  A06D               	btfss	109,0,c	;volatile
  2993   001B90  EFCC  F00D         	goto	i2u78_41
  2994   001B94  EFCE  F00D         	goto	i2u78_40
  2995   001B98                     i2u78_41:
  2996   001B98  EFC7  F00D         	goto	i2l192
  2997   001B9C                     i2u78_40:
  2998   001B9C                     
  2999                           ;MRF89XAM.c: 110:     data = SSP2BUF;
  3000   001B9C  CF6F F001          	movff	3951,read_spi_data@data	;volatile
  3001                           
  3002                           ;MRF89XAM.c: 113:     LATCbits.LC1 = 1;
  3003   001BA0  828B               	bsf	139,1,c	;volatile
  3004   001BA2                     
  3005                           ;MRF89XAM.c: 115:     return data;
  3006   001BA2  5001               	movf	read_spi_data@data^0,w,c
  3007   001BA4  0012               	return		;funcret
  3008   001BA6                     __end_of_read_spi_data:
  3009                           	callstack 0
  3010                           
  3011 ;; *************** function _read_byte_usb *****************
  3012 ;; Defined at:
  3013 ;;		line 30 in file "MCP2221A.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;		None
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  content         1    0[COMRAM] unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      unsigned char 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;Total ram usage:        1 bytes
  3032 ;; Hardware stack levels used: 1
  3033 ;; This function calls:
  3034 ;;		Nothing
  3035 ;; This function is called by:
  3036 ;;		_ISR
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text17
  3041   001BC2                     __ptext17:
  3042                           	callstack 0
  3043   001BC2                     _read_byte_usb:
  3044                           	callstack 26
  3045   001BC2                     
  3046                           ;MCP2221A.c: 32:     BYTE content = RCREG1;
  3047   001BC2  CFAE F001          	movff	4014,read_byte_usb@content	;volatile
  3048                           
  3049                           ;MCP2221A.c: 35:     if(RCSTA2bits.OERR)
  3050   001BC6  A271               	btfss	113,1,c	;volatile
  3051   001BC8  EFE8  F00D         	goto	i2u114_41
  3052   001BCC  EFEA  F00D         	goto	i2u114_40
  3053   001BD0                     i2u114_41:
  3054   001BD0  EFEC  F00D         	goto	i2l1770
  3055   001BD4                     i2u114_40:
  3056   001BD4                     
  3057                           ;MCP2221A.c: 36:     {;MCP2221A.c: 37:         RCSTA2bits.CREN = 0;
  3058   001BD4  9871               	bcf	113,4,c	;volatile
  3059                           
  3060                           ;MCP2221A.c: 38:         RCSTA2bits.CREN = 1;
  3061   001BD6  8871               	bsf	113,4,c	;volatile
  3062   001BD8                     i2l1770:
  3063                           
  3064                           ;MCP2221A.c: 40:     return content;
  3065   001BD8  5001               	movf	read_byte_usb@content^0,w,c
  3066   001BDA  0012               	return		;funcret
  3067   001BDC                     __end_of_read_byte_usb:
  3068                           	callstack 0
  3069                           
  3070                           	psect	rparam
  3071   000000                     
  3072                           	psect	temp
  3073   00004B                     btemp:
  3074                           	callstack 0
  3075   00004B                     	ds	1
  3076   000000                     int$flags	set	btemp
  3077   000000                     wtemp8	set	btemp+1
  3078   000000                     ttemp5	set	btemp+1
  3079   000000                     ttemp6	set	btemp+4
  3080   000000                     ttemp7	set	btemp+8
  3081                           
  3082                           	psect	idloc
  3083                           
  3084                           ;Config register IDLOC0 @ 0x200000
  3085                           ;	unspecified, using default values
  3086   200000                     	org	2097152
  3087   200000  FF                 	db	255
  3088                           
  3089                           ;Config register IDLOC1 @ 0x200001
  3090                           ;	unspecified, using default values
  3091   200001                     	org	2097153
  3092   200001  FF                 	db	255
  3093                           
  3094                           ;Config register IDLOC2 @ 0x200002
  3095                           ;	unspecified, using default values
  3096   200002                     	org	2097154
  3097   200002  FF                 	db	255
  3098                           
  3099                           ;Config register IDLOC3 @ 0x200003
  3100                           ;	unspecified, using default values
  3101   200003                     	org	2097155
  3102   200003  FF                 	db	255
  3103                           
  3104                           ;Config register IDLOC4 @ 0x200004
  3105                           ;	unspecified, using default values
  3106   200004                     	org	2097156
  3107   200004  FF                 	db	255
  3108                           
  3109                           ;Config register IDLOC5 @ 0x200005
  3110                           ;	unspecified, using default values
  3111   200005                     	org	2097157
  3112   200005  FF                 	db	255
  3113                           
  3114                           ;Config register IDLOC6 @ 0x200006
  3115                           ;	unspecified, using default values
  3116   200006                     	org	2097158
  3117   200006  FF                 	db	255
  3118                           
  3119                           ;Config register IDLOC7 @ 0x200007
  3120                           ;	unspecified, using default values
  3121   200007                     	org	2097159
  3122   200007  FF                 	db	255
  3123                           
  3124                           	psect	config
  3125                           
  3126                           ; Padding undefined space
  3127   300000                     	org	3145728
  3128   300000  FF                 	db	255
  3129                           
  3130                           ;Config register CONFIG1H @ 0x300001
  3131                           ;	Oscillator Selection bits
  3132                           ;	FOSC = INTIO67, Internal oscillator block
  3133                           ;	4X PLL Enable
  3134                           ;	PLLCFG = OFF, Oscillator used directly
  3135                           ;	Primary clock enable bit
  3136                           ;	PRICLKEN = ON, Primary clock is always enabled
  3137                           ;	Fail-Safe Clock Monitor Enable bit
  3138                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3139                           ;	Internal/External Oscillator Switchover bit
  3140                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3141   300001                     	org	3145729
  3142   300001  28                 	db	40
  3143                           
  3144                           ;Config register CONFIG2L @ 0x300002
  3145                           ;	Power-up Timer Enable bit
  3146                           ;	PWRTEN = OFF, Power up timer disabled
  3147                           ;	Brown-out Reset Enable bits
  3148                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3149                           ;	Brown Out Reset Voltage bits
  3150                           ;	BORV = 190, VBOR set to 1.90 V nominal
  3151   300002                     	org	3145730
  3152   300002  1F                 	db	31
  3153                           
  3154                           ;Config register CONFIG2H @ 0x300003
  3155                           ;	Watchdog Timer Enable bits
  3156                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  3157                           ;	Watchdog Timer Postscale Select bits
  3158                           ;	WDTPS = 32768, 1:32768
  3159   300003                     	org	3145731
  3160   300003  3C                 	db	60
  3161                           
  3162                           ; Padding undefined space
  3163   300004                     	org	3145732
  3164   300004  FF                 	db	255
  3165                           
  3166                           ;Config register CONFIG3H @ 0x300005
  3167                           ;	CCP2 MUX bit
  3168                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  3169                           ;	PORTB A/D Enable bit
  3170                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  3171                           ;	P3A/CCP3 Mux bit
  3172                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  3173                           ;	HFINTOSC Fast Start-up
  3174                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  3175                           ;	Timer3 Clock input mux bit
  3176                           ;	T3CMX = PORTC0, T3CKI is on RC0
  3177                           ;	ECCP2 B output mux bit
  3178                           ;	P2BMX = PORTD2, P2B is on RD2
  3179                           ;	MCLR Pin Enable bit
  3180                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  3181   300005                     	org	3145733
  3182   300005  BF                 	db	191
  3183                           
  3184                           ;Config register CONFIG4L @ 0x300006
  3185                           ;	Stack Full/Underflow Reset Enable bit
  3186                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3187                           ;	Single-Supply ICSP Enable bit
  3188                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  3189                           ;	Extended Instruction Set Enable bit
  3190                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3191                           ;	Background Debug
  3192                           ;	DEBUG = 0x1, unprogrammed default
  3193   300006                     	org	3145734
  3194   300006  85                 	db	133
  3195                           
  3196                           ; Padding undefined space
  3197   300007                     	org	3145735
  3198   300007  FF                 	db	255
  3199                           
  3200                           ;Config register CONFIG5L @ 0x300008
  3201                           ;	Code Protection Block 0
  3202                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  3203                           ;	Code Protection Block 1
  3204                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  3205                           ;	Code Protection Block 2
  3206                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  3207                           ;	Code Protection Block 3
  3208                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  3209   300008                     	org	3145736
  3210   300008  0F                 	db	15
  3211                           
  3212                           ;Config register CONFIG5H @ 0x300009
  3213                           ;	Boot Block Code Protection bit
  3214                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3215                           ;	Data EEPROM Code Protection bit
  3216                           ;	CPD = OFF, Data EEPROM not code-protected
  3217   300009                     	org	3145737
  3218   300009  C0                 	db	192
  3219                           
  3220                           ;Config register CONFIG6L @ 0x30000A
  3221                           ;	Write Protection Block 0
  3222                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  3223                           ;	Write Protection Block 1
  3224                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  3225                           ;	Write Protection Block 2
  3226                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  3227                           ;	Write Protection Block 3
  3228                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  3229   30000A                     	org	3145738
  3230   30000A  0F                 	db	15
  3231                           
  3232                           ;Config register CONFIG6H @ 0x30000B
  3233                           ;	Configuration Register Write Protection bit
  3234                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3235                           ;	Boot Block Write Protection bit
  3236                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3237                           ;	Data EEPROM Write Protection bit
  3238                           ;	WRTD = OFF, Data EEPROM not write-protected
  3239   30000B                     	org	3145739
  3240   30000B  E0                 	db	224
  3241                           
  3242                           ;Config register CONFIG7L @ 0x30000C
  3243                           ;	Table Read Protection Block 0
  3244                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  3245                           ;	Table Read Protection Block 1
  3246                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3247                           ;	Table Read Protection Block 2
  3248                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  3249                           ;	Table Read Protection Block 3
  3250                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  3251   30000C                     	org	3145740
  3252   30000C  0F                 	db	15
  3253                           
  3254                           ;Config register CONFIG7H @ 0x30000D
  3255                           ;	Boot Block Table Read Protection bit
  3256                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3257   30000D                     	org	3145741
  3258   30000D  40                 	db	64
  3259                           tosu	equ	0xFFF
  3260                           tosh	equ	0xFFE
  3261                           tosl	equ	0xFFD
  3262                           stkptr	equ	0xFFC
  3263                           pclatu	equ	0xFFB
  3264                           pclath	equ	0xFFA
  3265                           pcl	equ	0xFF9
  3266                           tblptru	equ	0xFF8
  3267                           tblptrh	equ	0xFF7
  3268                           tblptrl	equ	0xFF6
  3269                           tablat	equ	0xFF5
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           indf0	equ	0xFEF
  3273                           postinc0	equ	0xFEE
  3274                           postdec0	equ	0xFED
  3275                           preinc0	equ	0xFEC
  3276                           plusw0	equ	0xFEB
  3277                           fsr0h	equ	0xFEA
  3278                           fsr0l	equ	0xFE9
  3279                           wreg	equ	0xFE8
  3280                           indf1	equ	0xFE7
  3281                           postinc1	equ	0xFE6
  3282                           postdec1	equ	0xFE5
  3283                           preinc1	equ	0xFE4
  3284                           plusw1	equ	0xFE3
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           bsr	equ	0xFE0
  3288                           indf2	equ	0xFDF
  3289                           postinc2	equ	0xFDE
  3290                           postdec2	equ	0xFDD
  3291                           preinc2	equ	0xFDC
  3292                           plusw2	equ	0xFDB
  3293                           fsr2h	equ	0xFDA
  3294                           fsr2l	equ	0xFD9
  3295                           status	equ	0xFD8

Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         1167
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      74
    BANK0           160     36     158
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 40
		 -> USB_param2(BANK0[10]), USB_param1(BANK0[10]), MRF_param2(BANK0[10]), MRF_param1(BANK0[10]), 
		 -> ISR@temp_receive_string(COMRAM[40]), usb_message(BANK0[40]), MRF_message(BANK0[40]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 40
		 -> USB_param2(BANK0[10]), USB_param1(BANK0[10]), MRF_param2(BANK0[10]), MRF_param1(BANK0[10]), 
		 -> ISR@temp_receive_string(COMRAM[40]), usb_message(BANK0[40]), MRF_message(BANK0[40]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 40
		 -> USB_param2(BANK0[10]), USB_param1(BANK0[10]), MRF_param2(BANK0[10]), MRF_param1(BANK0[10]), 
		 -> ISR@temp_receive_string(COMRAM[40]), usb_message(BANK0[40]), main@MRF_msg_code(BANK0[4]), MRF_message(BANK0[40]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 40
		 -> USB_param2(BANK0[10]), USB_param1(BANK0[10]), MRF_param2(BANK0[10]), MRF_param1(BANK0[10]), 
		 -> ISR@temp_receive_string(COMRAM[40]), usb_message(BANK0[40]), main@MRF_msg_code(BANK0[4]), MRF_message(BANK0[40]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_25(CODE[1]), STR_24(CODE[1]), STR_23(CODE[1]), STR_22(CODE[1]), 
		 -> STR_21(CODE[1]), ISR@temp_receive_string(COMRAM[40]), STR_8(CODE[1]), STR_7(CODE[1]), 
		 -> MRF_message(BANK0[40]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_25(CODE[1]), STR_24(CODE[1]), STR_23(CODE[1]), STR_22(CODE[1]), 
		 -> STR_21(CODE[1]), ISR@temp_receive_string(COMRAM[40]), STR_8(CODE[1]), STR_7(CODE[1]), 
		 -> MRF_message(BANK0[40]), 

    strcmp@r	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), STR_29(CODE[3]), STR_27(CODE[2]), STR_20(CODE[4]), 
		 -> STR_18(CODE[4]), STR_16(CODE[4]), STR_14(CODE[2]), STR_12(CODE[3]), 
		 -> STR_10(CODE[2]), STR_6(CODE[1]), STR_4(CODE[2]), STR_2(CODE[4]), 

    strcmp@l	PTR const unsigned char  size(2) Largest target is 40
		 -> usb_message(BANK0[40]), main@MRF_msg_code(BANK0[4]), MRF_message(BANK0[40]), 

    parse_usb_message@message	PTR unsigned char  size(2) Largest target is 40
		 -> usb_message(BANK0[40]), 

    append_string@str	PTR unsigned char  size(2) Largest target is 40
		 -> USB_param2(BANK0[10]), USB_param1(BANK0[10]), MRF_param2(BANK0[10]), MRF_param1(BANK0[10]), 
		 -> ISR@temp_receive_string(COMRAM[40]), usb_message(BANK0[40]), 

    MRF_parse_message@code	PTR unsigned char  size(2) Largest target is 4
		 -> main@MRF_msg_code(BANK0[4]), 

    MRF_parse_message@message	PTR unsigned char  size(2) Largest target is 40
		 -> MRF_message(BANK0[40]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> USB_param2(BANK0[10]), USB_param1(BANK0[10]), MRF_param2(BANK0[10]), MRF_param1(BANK0[10]), 
		 -> ISR@temp_receive_string(COMRAM[40]), usb_message(BANK0[40]), main@MRF_msg_code(BANK0[4]), MRF_message(BANK0[40]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->i2_append_string
    i2_append_string->i2_strcpy
    _receive_MRF89XAM->_read_spi_data

Critical Paths under _main in BANK0

    _main->_MRF_parse_message
    _parse_usb_message->_append_string
    _MRF_parse_message->_append_string
    _append_string->_strcpy

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   21110
                                             29 BANK0      7     7      0
                  _MRF_parse_message
                    _init_interrupts
                          _init_pins
                         _init_uart2
                  _parse_usb_message
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _parse_usb_message                                   10     8      2    6677
                                             17 BANK0     10     8      2
                      _append_string
                            _isdigit
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _init_uart2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_pins                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_interrupts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MRF_parse_message                                   13     9      4   10209
                                             17 BANK0     12     8      4
                      _append_string
                            _isdigit
                             _strcmp
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               5     1      4    1936
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              4     2      2     389
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _append_string                                        7     4      3    3855
                                             10 BANK0      7     4      3
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     394
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _strcpy                                              10     6      4    2172
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 52    52      0     976
                                             17 COMRAM    52    52      0
                      _read_byte_usb
                   _receive_MRF89XAM
                    i2_append_string
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (5) i2_append_string                                      7     4      3     597
                                             10 COMRAM     7     4      3
                           i2_strcpy
                           i2_strlen
 ---------------------------------------------------------------------------------
 (6) i2_strlen                                             4     2      2     116
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) i2_strcpy                                            10     6      4     200
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) _receive_MRF89XAM                                     0     0      0      25
                      _read_spi_data
 ---------------------------------------------------------------------------------
 (6) _read_spi_data                                        2     2      0      25
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _read_byte_usb                                        1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MRF_parse_message
     _append_string
       _strcpy
       _strlen
     _isdigit
     _strcmp
     _strcpy
     _strlen
   _init_interrupts
   _init_pins
   _init_uart2
   _parse_usb_message
     _append_string
     _isdigit
     _strcmp
   _strcmp
   _strcpy

 _ISR (ROOT)
   _read_byte_usb
   _receive_MRF89XAM
     _read_spi_data
   i2_append_string
     i2_strcpy
     i2_strlen
   i2_strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     3C0      54       24.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     24      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4A       1       78.7%
BITBANK15           38      0       0      34        0.0%
BANK15              38      0       0      35        0.0%
BITBIGSFRllll       30      0       0      52        0.0%
BITBIGSFRlhhlhh     21      0       0      41        0.0%
BITBIGSFRhlhhl      18      0       0      38        0.0%
BITBIGSFRhh          D      0       0      36        0.0%
BITBIGSFRllhlhh      B      0       0      48        0.0%
BITBIGSFRlhhlhl      9      0       0      42        0.0%
BITBIGSFRlhllh       7      0       0      45        0.0%
BITBIGSFRlhhlll      7      0       0      44        0.0%
BITBIGSFRlhlll       7      0       0      46        0.0%
BITBIGSFRlhhllh      4      0       0      43        0.0%
BITBIGSFRllhlhl      2      0       0      49        0.0%
BITBIGSFRlhhh        2      0       0      40        0.0%
BITBIGSFRllhh        1      0       0      47        0.0%
BITBIGSFRlllh        1      0       0      51        0.0%
BITBIGSFRllhll       1      0       0      50        0.0%
BITBIGSFRhlhhh       1      0       0      37        0.0%
BITBIGSFRhll         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      53        0.0%
DATA                 0      0     4F8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Mar 23 19:59:42 2024

                 _usb_message 0062             _parse_usb_message 14A0                           l112 176A  
                         l104 181A                           l122 1B56                           l125 1BC0  
                         l233 149E                           l254 149E                           l263 1942  
                         l338 169C                           l298 1BF0             ??_init_interrupts 00DA  
                         _ISR 0008                           u720 1A00                           u800 1B80  
                         u730 1A12                           u731 1A0E                           u740 1AE0  
                         u900 11CC                           u741 1ADC                           u901 11C8  
                         u750 1896                           u910 11E6                           u727 19F6  
                         u751 1892                           u911 11E2                           u760 18AE  
                         u920 122A                           u840 105A                           u761 18AA  
                         u921 1226                           u841 1056                           u770 18FE  
                         u930 1248                           u850 109A                           u771 18FA  
                         u931 1244                           u851 1096                           u940 1266  
                         u860 10DA                           u941 1262                           u861 10D6  
                         u790 1B7E                           u950 1328                           u870 111A  
                         u791 1B78                           u951 1324                           u871 1116  
                         u960 1346                           u880 115A                           u961 1342  
                         u881 1156                           u970 1356                           u890 119A  
                         u971 1352                           u891 1196                           u980 13B2  
                         u981 13AE                           u990 13DC                           u991 13D8  
                _usb_received 0048            ?_parse_usb_message 00EB                           wreg 000FE8  
                  _TXSTA2bits 000F72                    _USB_param1 00BC                    _USB_param2 00B2  
                        ?_ISR 0001                          l1015 1B84                          l1032 1A12  
                        l1026 18D0                          l1038 1AEE                          l1520 1AC2  
                        l1600 1BDE                          l1514 19B4                          l1522 1AC8  
                        l1530 1864                          l1610 1BEA                          l1602 1BE2  
                        l1516 19C4                          l1524 1AE0                          l1540 18D2  
                        l1532 186C                          l1700 1372                          l1620 101C  
                        l1612 1BEC                          l1604 1BE4                          l1518 1AB6  
                        l1542 18E6                          l1534 1896                          l1702 13B2  
                        l1710 1404                          l1630 1072                          l1622 102E  
                        l1614 1BEE                          l1606 1BE6                          l1544 18FE  
                        l1560 1B58                          l1536 18AE                          l1528 1860  
                        l1704 13DC                          l1712 141A                          l1640 10DA  
                        l1632 109A                          l1624 1032                          l1608 1BE8  
                        l1800 16D8                          l1546 192E                          l1714 1434  
                        l1706 13E4                          l1650 115A                          l1642 10F2  
                        l1634 109A                          l1626 105A                          l1618 101C  
                        l1730 14FA                          l1722 14A0                          l1810 1736  
                        l1802 16E8                          l1708 1400                          l1660 11B2  
                        l1652 115A                          l1644 111A                          l1636 10B2  
                        l1628 105A                          l1580 1B40                          l1740 1574  
                        l1820 17A8                          l1812 175E                          l1804 16EC  
                        l1670 1210                          l1662 11CC                          l1654 1172  
                        l1646 111A                          l1638 10DA                          l1590 1BBA  
                        l1750 15DC                          l1734 1526                          l1726 14CE  
                        l1830 1844                          l1814 1778                          l1806 1700  
                        l1680 12A4                          l1672 122A                          l1664 11E6  
                        l1656 119A                          l1648 1132                          l1592 1BBC  
                        l1584 1BA6                          l1760 166A                          l1744 157C  
                        l1736 1540                          l1816 177C                          l1808 172A  
                        l1824 17CE                          l1690 12F6                          l1682 12C2  
                        l1674 1248                          l1666 11E6                          l1658 119A  
                        l1594 1BBE                          l1586 1BAC                          l1578 1B26  
                        l1754 15F8                          l1762 1686                          l1746 15AE  
                        l1738 155A                          l1826 1828                          l1818 1780  
                        l1692 1328                          l1684 12DE                          l1676 1266  
                        l1668 11FA                          l1588 1BB8                          l1756 1638  
                        l1748 15CC                          l1764 168A                          l1828 183C  
                        l1694 1346                          l1686 12EE                          l1678 1290  
                        l1598 1BDC                          l1758 1662                          l1790 169E  
                        l1696 1356                          l1792 16A2                          l1938 17E4  
                        l1794 16BE                          l1796 16CA                          l1798 16D0  
                        STR_1 100D                          STR_2 100D                          STR_3 1018  
                        STR_4 1018                          STR_6 1013                          STR_7 1013  
                        STR_8 1013                          STR_9 1016                          u1000 1416  
                        u1001 1412                          u1010 1434                          u1011 1430  
                        u1100 15DC                          u1020 14CA                          u1101 15D8  
                        u1021 14C6                          u1110 1638                          u1030 14F6  
                        u1111 1634                          u1031 14F2                          u1120 1662  
                        u1040 1522                          u1200 1778           ??_parse_usb_message 00ED  
                        u1121 165E                          u1041 151E                          u1201 1774  
                        u1130 169C                          u1050 1540                          u1210 17A8  
                        u1131 1698                          u1051 153C                          u1211 17A4  
                        u1060 155A                          u1220 1828                          u1061 1556  
                        u1221 1824                          u1070 1574                          u1230 183C  
                        u1071 1570                          u1231 1838                          u1080 15AE  
                        u1081 15AA                          u1090 15CC                          u1170 16E8  
                        u1091 15C8                          u1171 16E4                          u1180 172A  
                        u1181 1726                          u1190 175E                          u1191 175A  
                        u1357 16AE             ??i2_append_string 000E                          _main 169E  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 004B                          start 0132           append_string@length 00E9  
             ??_append_string 00E7               append_string@ch 00E6                  ___param_bank 000000  
                       ??_ISR 0012     __end_of_parse_usb_message 169E                         ?_main 0001  
                       STR_10 1016                         STR_11 1011                         STR_12 1011  
                       STR_20 1001                         STR_21 1013                         STR_13 1014  
                       STR_22 1013                         STR_14 1014                         STR_23 1013  
                       STR_31 100D                         STR_15 1005                         STR_24 1013  
                       STR_16 1005                         STR_32 100D                         STR_25 1013  
                       STR_33 100D                         STR_17 1009                         STR_18 1009  
                       STR_34 100D                         STR_27 1016                         STR_19 1001  
                       STR_29 1011                         _T0CON 000FD5                         i2l302 1BDA  
                       i2l216 1BF2                         i2l137 0106                         i2l219 1C04  
                       i2l263 19B2                         i2l192 1B8E                         i2l194 1B9C  
                       i2l195 1BA4                         _TMR0H 000FD7                         _TMR0L 000FD6  
             __end_of_isdigit 1B86                         _state 0060                         tablat 000FF5  
                       plusw1 000FE3                         plusw2 000FDB                         ttemp5 004C  
                       ttemp6 004F                         ttemp7 0053                         status 000FD8  
                       wtemp8 004C        ISR@temp_receive_string 001C             _MRF_parse_message 101C  
            __end_ofi2_strcpy 1A72              __end_ofi2_strlen 1B26              append_string@str 00E4  
             __initialization 1A72            ?_MRF_parse_message 00EB                  __end_of_main 1860  
         ??_MRF_parse_message 00EF                        ??_main 00F7                 __activetblptr 000002  
                      _ANSELA 000F38                        _ANSELB 000F39                        _ANSELC 000F3A  
                      _ANSELD 000F3B                        _ANSELE 000F3C                        i2l1032 1A70  
                      i2l1038 1B24                        i2l1550 1B86                        i2l1552 1B86  
                      i2l1554 1B88                        i2l1570 1AFC                        i2l1556 1BA2  
                      i2l1564 1A14                        i2l1572 1B00                        i2l1566 1A24  
                      i2l1574 1B18                        i2l1568 1AF0                        i2l1840 0032  
                      i2l1770 1BD8                        i2l1850 0066                        i2l1842 0044  
                      i2l1780 1944                        i2l1860 0098                        i2l1852 0076  
                      i2l1844 0044                        i2l1766 1BC2                        i2l1774 1BF2  
                      i2l1782 1958                        i2l1870 00C0                        i2l1862 009C  
                      i2l1854 0084                        i2l1846 0052                        i2l1838 0032  
                      i2l1768 1BD4                        i2l1776 1C00                        i2l1784 196E  
                      i2l1872 00C6                        i2l1856 0092                        i2l1864 00A0  
                      i2l1848 0060                        i2l1786 199E                        i2l1874 00D8  
                      i2l1866 00AE                        i2l1858 0094                        i2l1876 00DE  
                      i2l1868 00BE                        i2l1878 00F6                        _RCREG1 000FAE  
                      _OSCCON 000FD3                        _TMR0IE 007F95                        _SPBRG2 000F75  
                      _TMR0IF 007F92     __end_of_MRF_parse_message 14A0                        _TXREG1 000FAD  
       MRF_parse_message@code 00ED       parse_usb_message@length 00F2                        clear_0 1A7A  
                      clear_1 1A8C                        clear_2 1A98                        isa$std 000001  
                      _strcmp 1860                        _strcpy 19B4                        _strlen 1AB6  
                   ??_isdigit 00DC                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0060  
     __end_of__initialization 1AA8                 ___rparam_used 000001               _init_interrupts 1BA6  
              __pcstackCOMRAM 0001               i2_append_string 1944                     ?i2_strcpy 0001  
                   ?i2_strlen 0001  MRF_parse_message@param1_full 00F5                    __pbssBANK0 0060  
                  __pbssBANK1 0100                   i2strcpy@src 0003            main@previous_state 00FD  
               _read_byte_usb 1BC2                       ?_strcmp 00DA                       ?_strcpy 00DA  
                     ?_strlen 00DA                 _read_spi_data 1B86                  ISR@MRF_input 0045  
            _MRF_transmitting 004A                       i2u81_40 1A5E                       i2u81_47 1A54  
                     i2u82_40 1A70                       i2u82_41 1A6C                       i2u83_40 1B18  
                     i2u83_41 1B14                       i2u78_40 1B9C                       i2u78_41 1B98  
                     _SSP2BUF 000F6F                    ??i2_strcpy 0005                    ??i2_strlen 0003  
     __end_of_init_interrupts 1BC2      parse_usb_message@counter 00F4      parse_usb_message@message 00EB  
                     __Hparam 0000                       __Lparam 0000              _receive_MRF89XAM 1BF2  
       __end_of_append_string 1944                ?_read_byte_usb 0001       __end_ofi2_append_string 19B4  
                __psmallconst 1000                    _init_uart2 1BDC                       __pcinit 1A72  
                     __ramtop 1000                       __ptext0 169E                       __ptext1 14A0  
                     __ptext2 1BDC                       __ptext3 1B26                       __ptext4 1BA6  
                     __ptext5 101C                       __ptext6 1860                       __ptext7 1B58  
                     __ptext8 18D2                       __ptext9 1AB6                     _T0CONbits 000FD5  
              ?_read_spi_data 0001                       _isdigit 1B58             __end_of_init_pins 1B58  
        end_of_initialization 1AA8                 __Lmediumconst 0000                       postdec1 000FE5  
                     postinc0 000FEE                       postinc2 000FDE                       strcmp@l 00DA  
                     strcmp@r 00DC                       strcpy@d 00E2                       strlen@a 00DC  
                     strcpy@s 00E0                       strlen@s 00DA            i2append_string@str 000B  
                   _PORTBbits 000F81                    _timer_tick 0046                     _PORTDbits 000F83  
                   _TRISBbits 000F93                     _TRISCbits 000F94                     _TRISDbits 000F95  
        _MRF_message_received 0061              ?_init_interrupts 0001      MRF_parse_message@counter 00F6  
    MRF_parse_message@message 00EB               ??_read_byte_usb 0001              ?i2_append_string 000B  
                 ?_init_uart2 0001               ??_read_spi_data 0001                __end_of_strcmp 18D2  
              __end_of_strcpy 1A14                __end_of_strlen 1AF0           start_initialization 1A72  
                 __end_of_ISR 0132                     i2strcpy@d 0009                     i2strlen@a 0003  
                   i2strcpy@s 0007                     i2strlen@s 0001                      ??_strcmp 00DE  
                    ??_strcpy 00DE                      ??_strlen 00DC                   __pbssBIGRAM 0150  
                 __pbssCOMRAM 0046                _current_report 0128                 __pcstackBANK0 00DA  
                ISR@usb_input 0044      __end_of_receive_MRF89XAM 1C06                      ISR@F6726 0100  
                i2strcpy@dest 0001                   _all_reports 0150                     __pintcode 0008  
                 __smallconst 1000                      ?_isdigit 00DA          read_byte_usb@content 0001  
                   _init_pins 1B26                      _LATCbits 000F8B                      _PIE1bits 000F9D  
                    _PIE3bits 000FA3                      i2u114_40 1BD4                      i2u130_40 00BE  
                    i2u114_41 1BD0                      i2u130_41 00BA                      i2u115_40 1C00  
                    i2u131_40 00D8                      i2u115_41 1BFC                      i2u131_41 00D4  
                    i2u116_40 196E                      i2u116_41 196A                      i2u124_41 003C  
                    i2u125_40 0052                      i2u125_41 004E                      i2u126_40 0060  
                    i2u126_41 005C                      i2u127_40 0084                      i2u127_41 0080  
                    i2u128_40 0092                      i2u128_41 008E                      i2u129_40 00AE  
                    i2u129_41 00AA                      _PIR1bits 000F9E                      _RCONbits 000FD0  
           i2append_string@ch 000D              main@MRF_msg_code 00F9       MRF_parse_message@length 00F4  
                    i2_strcpy 1A14                      i2_strlen 1AF0                    ?_init_pins 0001  
                 _INTCON3bits 000FF0                      __Hrparam 0000                      __Lrparam 0000  
                ??_init_uart2 00DA                      __ptext10 19B4                      __ptext12 1944  
                    __ptext13 1AF0                      __ptext14 1A14                      __ptext15 1BF2  
                    __ptext16 1B86                      __ptext17 1BC2                    strcpy@dest 00DA  
        _usb_message_received 0049            __end_of_init_uart2 1BF2         i2append_string@length 0010  
                    isa$xinst 000000                      int$flags 004B                 _append_string 18D2  
       __end_of_read_byte_usb 1BDC                  _SSP2STATbits 000F6D         __end_of_read_spi_data 1BA6  
                  _INTCONbits 000FF2                      isdigit@c 00DA             ?_receive_MRF89XAM 0001  
                 ??_init_pins 00DA                      intlevel2 0000            ??_receive_MRF89XAM 0002  
parse_usb_message@param1_full 00F3                     strcpy@src 00DC                    _RCSTA2bits 000F71  
           read_spi_data@data 0001                ?_append_string 00E4                   _MRF_message 008A  
                  _MRF_param1 00D0                    _MRF_param2 00C6  
