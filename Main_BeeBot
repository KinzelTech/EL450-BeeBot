// PIC18F46K22 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config FOSC = INTIO67   // Oscillator Selection bits (Internal oscillator block)
#pragma config PLLCFG = OFF     // 4X PLL Enable (Oscillator used directly)
#pragma config PRICLKEN = ON    // Primary clock enable bit (Primary clock is always enabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRTEN = OFF     // Power-up Timer Enable bit (Power up timer disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 190       // Brown Out Reset Voltage bits (VBOR set to 1.90 V nominal)

// CONFIG2H
#pragma config WDTEN = OFF      // Watchdog Timer Enable bits (Watch dog timer is always disabled. SWDTEN has no effect.)
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = PORTC1  // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = ON      // PORTB A/D Enable bit (PORTB<5:0> pins are configured as analog input channels on Reset)
#pragma config CCP3MX = PORTB5  // P3A/CCP3 Mux bit (P3A/CCP3 input/output is multiplexed with RB5)
#pragma config HFOFST = ON      // HFINTOSC Fast Start-up (HFINTOSC output and ready status are not delayed by the oscillator stable status)
#pragma config T3CMX = PORTC0   // Timer3 Clock input mux bit (T3CKI is on RC0)
#pragma config P2BMX = PORTD2   // ECCP2 B output mux bit (P2B is on RD2)
#pragma config MCLRE = EXTMCLR  // MCLR Pin Enable bit (MCLR pin enabled, RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = ON         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled if MCLRE is also 1)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection Block 0 (Block 0 (000800-003FFFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection Block 1 (Block 1 (004000-007FFFh) not code-protected)
#pragma config CP2 = OFF        // Code Protection Block 2 (Block 2 (008000-00BFFFh) not code-protected)
#pragma config CP3 = OFF        // Code Protection Block 3 (Block 3 (00C000-00FFFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection Block 0 (Block 0 (000800-003FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection Block 1 (Block 1 (004000-007FFFh) not write-protected)
#pragma config WRT2 = OFF       // Write Protection Block 2 (Block 2 (008000-00BFFFh) not write-protected)
#pragma config WRT3 = OFF       // Write Protection Block 3 (Block 3 (00C000-00FFFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection Block 0 (Block 0 (000800-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection Block 1 (Block 1 (004000-007FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection Block 2 (Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection Block 3 (Block 3 (00C000-00FFFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0007FFh) not protected from table reads executed in other blocks)

/******************************************************************************/
/*                               Libraries                                    */
/******************************************************************************/
#include <xc.h>             //XC8 default library
#include <pic18f46k22.h>    //PIC MCU default library
#include <string.h>         //C Strings library
#include <math.h>           //C Math library

/******************************************************************************/
/*                            Global Constants                                */
/******************************************************************************/
#define _XTAL_FREQ 8000000  //Set internal clock speed to 8MHz
#define TRUE       1        //Boolean true
#define FALSE      0        //Boolean false

/******************************************************************************/
/*                           Custom Data Types                                */
/******************************************************************************/
typedef unsigned char BYTE; //Single byte data type

/******************************************************************************/
/*                            Global Variables                                */
/******************************************************************************/
unsigned int timer_tick = 0;    //Counter for Timer0

/******************************************************************************/
/*                          Function Declarations                             */
/******************************************************************************/
void init_pins      (void);     //Initialize all pins to initial values.
void init_interrupts(void);     //Initialize all program interrupts

/******************************************************************************/
/*                               Main Function                                */
/******************************************************************************/
void main(void) 
{
    //Clock setup
    OSCCON = 0b01100111;
    __delay_ms(200);
    
    //Initializers
    init_pins();
    init_interrupts();
    //Put any other initializer functions here.
    //...
    
    //Infinite processing loop
    while(TRUE)
    {
        //Put your processing code here.
        //Use functions as much as possible, instead of writing commands directly in main.
    }
    
    return;
}

/******************************************************************************/
/*                            Initialize all pins                             */
/******************************************************************************/
void init_pins(void)
{
    //Put all your ANSEL, LAT, TRIS setup commands here.
    return;
}

/******************************************************************************/
/*                       Initialize program interrupts                        */
/******************************************************************************/
void init_interrupts(void)
{
    RCONbits.IPEN    = 0;   //Disable priority levels for interrupts.
    INTCONbits.GIE   = 0;   //Disable all interrupts.
    
    //Place interrupt enable and setup commands here
    //...
    
    //Timer0 setup
    T0CON    	      = 0x08;     //Configure to 16bit timer, no prescaler.
    TMR0H             = 0xF8;     //Set preload to 63535.
    TMR0L    	      = 0x2F;
    INTCONbits.TMR0IE = 1;        //Enable Timer0 interrupts.
    
    //Turn interrupts on
    INTCONbits.PEIE  = 1;   //Enable all peripheral interrupts.
    INTCONbits.GIE   = 1;   //Enable all interrupts.
    T0CONbits.TMR0ON  = 1;  //Turn on Timer0.
    return;
}

/******************************************************************************/
/*               Interrupt service routine for all interrupts                 */
/******************************************************************************/
void __interrupt() ISR(void)
{
    //Add checks here for any interrupts.
    //...
    
    //Timer0 interrupt
    if(TMR0IE && TMR0IF) //Increment time if Timer0 is enabled and Timer0 has overflowed.
    {
        TMR0IF = 0;       //Reset Timer0 overflow flag.
        timer_tick++;     //Increment time.
        TMR0H  = 0xF8;    //Reset 16bit timer preload to 63535
        TMR0L  = 0x2F;	
    }
    return;
}
